if(length(grep("cannot be found in hla_pseudo list", test1)) > 0) next
if(length(grep("Could not find allele", test1)) > 0) next
for(h1 in 1:length(num1)){
print(paste((h1 / length(num1)) * 100, "perc. fin"))
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(2, 3, 4, 5, 10, 11)])
d1<-t(d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(2, 5, 4, 6, 3, 9, 10)]))
d1<-d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),]
if(is.null(nrow(d1))) d1<-t(d1)
}
if(nrow(d1)==0 | ncol(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
rownames(d1) <- NULL
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50", "Mut_Rank",
"Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start", "Exon_End",
"Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA",
"Tumor_RNA_based_on_DNA", "MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".HLACLASS2.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
return(full_peptide)
}
Result_HLA2_INDEL <- MainINDELClass2(input_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
apply_annotation = FALSE)
print(head(Result_HLA2_INDEL))
print(Export_Summary_IndelSV(Input = Result_HLA2_INDEL, Mut_IC50_th = 500))
print(Export_Summary_IndelSV_perFragments(Input = Result_HLA2_INDEL, Mut_IC50_th = 500))
print(Export_Summary_SNV(Input = Result_HLA2_SNV, Mut_IC50_th = 500, Wt_IC50_th = 500))
Result_HLA2_SV <- MainSVFUSIONClass2(input_file = "data/sample_sv_bnd.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan",
refdna_file = "lib/GRCh37.fa",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8)
print(head(Result_HLA2_SV))
print(Export_Summary_IndelSV(Result_HLA2_SV, Mut_IC50_th = 500))
MergeFragmentsClass2<-function(hmdir = getwd(),
annotation_file,
input_dir,
file_prefix){
print("Merging Results...")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS2", files), grep(file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs", "Exon_Starts",
"Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
rownames(info)<-NULL
colnames(info)<-cinfo
info[,12]<-paste(info[,3], info[,12], sep="_")
info[, match("Tumor_RNA_based_on_DNA",colnames(info))]<-
as.numeric(info[,match("Total_RNA",colnames(info))]) *
as.numeric(info[,match("Tumor_Depth",colnames(info))]) /
as.numeric(info[,match("Total_Depth",colnames(info))])
#Remove RNAseq Info
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-grep("Pos ", test1) + 2
ee1<-grep("of strong", test1) - 2
num1<-sapply(gsub("[ ]+", "\t", test1[ss1]), function(x) strsplit(x, "\t")[[1]][4])
#if(length(grep("No peptides derived", test1[1:45])) > 0) next
if(length(grep("cannot be found in hla_pseudo list", test1)) > 0) next
if(length(grep("Could not find allele", test1)) > 0) next
for(h1 in 1:length(num1)){
print(paste((h1 / length(num1)) * 100, "perc. fin"))
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(2, 5, 4, 6, 3, 9, 10)])
d1<-t(d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(2, 5, 4, 6, 3, 9, 10)]))
d1<-d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),]
if(is.null(nrow(d1))) d1<-t(d1)
}
if(nrow(d1)==0 | ncol(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
rownames(d1) <- NULL
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50",
"Mut_Rank", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs",
"Exon_Starts", "Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".HLACLASS2.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
return(full_peptide)
}
MergeINDELSVClass2<-function(hmdir = getwd(),
annotation_file,
input_dir,
file_prefix){
print("Merging Results...")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS2", files), grep(file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start",
"Exon_End", "Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
rownames(info)<-NULL
colnames(info)<-cinfo
info[,12]<-paste(info[,3], info[,12], sep="_")
info[, match("Tumor_RNA_based_on_DNA",colnames(info))]<-
as.numeric(info[,match("Total_RNA",colnames(info))]) *
as.numeric(info[,match("Tumor_Depth",colnames(info))]) /
as.numeric(info[,match("Total_Depth",colnames(info))])
#Remove RNAseq Info
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-grep("Pos ", test1) + 2
ee1<-grep("of strong", test1) - 2
num1<-sapply(gsub("[ ]+", "\t", test1[ss1]), function(x) strsplit(x, "\t")[[1]][4])
#if(length(grep("No peptides derived", test1[1:45])) > 0) next
if(length(grep("cannot be found in hla_pseudo list", test1)) > 0) next
if(length(grep("Could not find allele", test1)) > 0) next
for(h1 in 1:length(num1)){
print(paste((h1 / length(num1)) * 100, "perc. fin"))
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(2, 5, 4, 6, 3, 9, 10)])
d1<-t(d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(2, 5, 4, 6, 3, 9, 10)]))
d1<-d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),]
if(is.null(nrow(d1))) d1<-t(d1)
}
if(nrow(d1)==0 | ncol(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
rownames(d1) <- NULL
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50", "Mut_Rank",
"Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start", "Exon_End",
"Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA",
"Tumor_RNA_based_on_DNA", "MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".HLACLASS2.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
return(full_peptide)
}
Result_HLA2_Seq <- MainSeqFragmentClass2(input_sequence = "atggcagaagatgatccatatttgggaaggcctgaacaaatgtttcatttgatccttctttgactcatacaatatttaatc",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
hmdir = getwd(),
job_id = "NO_job_id",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan",
reference_gene_symbol = c("NFKB1", "BCL3"))
MergeFragmentsClass2<-function(hmdir = getwd(),
annotation_file,
input_dir,
file_prefix){
print("Merging Results...")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS2", files), grep(file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs", "Exon_Starts",
"Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
rownames(info)<-NULL
colnames(info)<-cinfo
info[,12]<-paste(info[,3], info[,12], sep="_")
info[, match("Tumor_RNA_based_on_DNA",colnames(info))]<-
as.numeric(info[,match("Total_RNA",colnames(info))]) *
as.numeric(info[,match("Tumor_Depth",colnames(info))]) /
as.numeric(info[,match("Total_Depth",colnames(info))])
#Remove RNAseq Info
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-grep("Pos ", test1) + 2
ee1<-grep("of strong", test1) - 2
num1<-sapply(gsub("[ ]+", "\t", test1[ss1]), function(x) strsplit(x, "\t")[[1]][4])
#if(length(grep("No peptides derived", test1[1:45])) > 0) next
if(length(grep("cannot be found in hla_pseudo list", test1)) > 0) next
if(length(grep("Could not find allele", test1)) > 0) next
for(h1 in 1:length(num1)){
print(paste((h1 / length(num1)) * 100, "perc. fin"))
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(2, 5, 4, 6, 3, 9, 10)])
d1<-t(d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(2, 5, 4, 6, 3, 9, 10)]))
d1<-d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),]
if(is.null(nrow(d1))) d1<-t(d1)
}
if(nrow(d1)==0 | ncol(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
rownames(d1) <- NULL
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50",
"Mut_Rank", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs",
"Exon_Starts", "Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".HLACLASS2.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
return(full_peptide)
}
annotation_file
annotation_file <- "vignettes/result.NO_job_id.SeqFragment2/NO_job_id_SeqFragment.peptide.txt"
input_dir
input_dir <- "vignettes/result.NO_job_id.SeqFragment2"
file_prefix <- "NO_job_id_SeqFragment"
print("Merging Results...")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS2", files), grep(file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs", "Exon_Starts",
"Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
info[1,]
if(is.null(ncol(info))) info<-t(as.matrix(info))
rownames(info)<-NULL
colnames(info)<-cinfo
info[,3]
info[,12]
info[1,]
info[1,1:10]
info[,12]
info[,12]<-paste(info[,3], info[,12], sep="_")
info[,12]
#Remove RNAseq Info
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
c(16)
info[,c(16)]
info[,1:10]
info[1,1:10]
print("Merging Results...")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS2", files), grep(file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs", "Exon_Starts",
"Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
rownames(info)<-NULL
colnames(info)<-cinfo
info[,12]<-paste(info[,3], info[,12], sep="_")
info[, match("Tumor_RNA_based_on_DNA",colnames(info))]<-
as.numeric(info[,match("Total_RNA",colnames(info))]) *
as.numeric(info[,match("Tumor_Depth",colnames(info))]) /
as.numeric(info[,match("Total_Depth",colnames(info))])
#Remove RNAseq Info
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-grep("Pos ", test1) + 2
ee1<-grep("of strong", test1) - 2
num1<-sapply(gsub("[ ]+", "\t", test1[ss1]), function(x) strsplit(x, "\t")[[1]][4])
#if(length(grep("No peptides derived", test1[1:45])) > 0) next
if(length(grep("cannot be found in hla_pseudo list", test1)) > 0) next
if(length(grep("Could not find allele", test1)) > 0) next
for(h1 in 1:length(num1)){
print(paste((h1 / length(num1)) * 100, "perc. fin"))
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(2, 5, 4, 6, 3, 9, 10)])
d1<-t(d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(2, 5, 4, 6, 3, 9, 10)]))
d1<-d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),]
if(is.null(nrow(d1))) d1<-t(d1)
}
aaa
}
}
}
num1
test1
test1
print(paste(dir, f, sep="/"))
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1<-gsub(" <=WB| <=SB", "", test1)
test1
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1
f
files_part[grep("\\.peptide\\.txt", files_part)]
files[intersect(grep("HLACLASS2", files), grep(file_prefix, files))]
files
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS2", files), grep(file_prefix, files))]
files_part
input_sequence = NA
input_sequence = "atggcagaagatgatccatatttgggaaggcctgaacaaatgtttcatttgatccttctttgactcatacaatatttaatc"
file_name_in_hla_table = "sample"
hla_file = "data/sample_hla_table_c2.txt"
hmdir = getwd()
job_id = "NO_job_id"
refflat_file  = "lib/refFlat.txt"
refmrna_file = "lib/refMrna.fa"
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan"
reference_gene_symbol = c("NFKB1", "BCL3")
group_ids = seq(1:length(reference_nm_id))
hla_types = NA
input_sequence = NA
group_ids = seq(1:length(reference_nm_id))
hla_file = "here_is_a_table"
hla_types = NA
file_name_in_hla_table = NA
refflat_file = paste(hmdir, "lib/refFlat.txt", sep="/")
refmrna_file = paste(hmdir, "lib/refMrna.fa", sep="/")
hmdir = getwd()
job_id = "ID"
export_dir = paste("result", job_id, "SeqFragment2", sep=".")
netMHCIIpan_dir = paste(hmdir, "lib/netMHCIIpan-3.1/netMHCIIpan", sep="/")
peptide_length = c(15)
reference_nm_id = NA
reference_gene_symbol = NA
IgnoreShortPeptides = TRUE
input_sequence = "atggcagaagatgatccatatttgggaaggcctgaacaaatgtttcatttgatccttctttgactcatacaatatttaatc"
file_name_in_hla_table = "sample"
hla_file = "data/sample_hla_table_c2.txt"
hla_file = "data/sample_hla_table_c2.txt"
hmdir = getwd()
job_id = "NO_job_id"
refflat_file  = "lib/refFlat.txt"
refmrna_file = "lib/refMrna.fa"
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan"
reference_gene_symbol = c("NFKB1", "BCL3")
#Get HLA-Type
if(file.exists(hla_file) & !is.na(hla_types[1])){
print(paste("Using:", hla_file))
}
if(file.exists(hla_file)){
hla_types <- getHLAtypes(hla_file, file_name_in_hla_table)
}
if(is.na(hla_types[1])) {
print("Please indicate hla_file and file_name_in_hla_table, or hla_types appropriately.")
return(NULL)
}
#Get HLA-Type
if(file.exists(hla_file) & !is.na(hla_types[1])){
print(paste("Using:", hla_file))
}
file.exists(hla_file)
hla_file
hla_file
#Get HLA-Type
if(file.exists(hla_file) & !is.na(hla_types[1])){
print(paste("Using:", hla_file))
}
file.exists(hla_file)
hla_file
library(devtools)
devtools::build_manual()
