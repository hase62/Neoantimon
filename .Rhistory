if(!Pass){
print("refFlat and refMrna data do not Match to vcf Description")
print(f[1:7])
print("Skip This Mutation")
}
}
#Integrate The Same Peptide
if(is.null(refFasta)) return(NULL)
if(!is.null(nrow(refFasta))){
integrated_results <- integrate_same_peptide(refFasta, fasta, fasta_wt)
refFasta <- integrated_results[[1]]
fasta <- integrated_results[[2]]
fasta_wt <- integrated_results[[3]]
}
write.table(fasta,
paste(export_dir, "/", rev(strsplit(input_file, "/")[[1]])[1], ".", job_id, ".", "peptide", ".", "fasta", sep=""),
row.names=FALSE, col.names=FALSE, quote=FALSE, sep="\t")
write.table(fasta_wt,
paste(export_dir, "/", rev(strsplit(input_file, "/")[[1]])[1], ".", job_id, ".", "wtpeptide", ".", "fasta", sep=""),
row.names=FALSE, col.names=FALSE, quote=FALSE, sep="\t")
write.table(refFasta,
paste(export_dir, "/", rev(strsplit(input_file, "/")[[1]])[1], ".", job_id, ".", "peptide", ".", "txt", sep=""),
row.names=seq(1:nrow(refFasta)), col.names=FALSE, quote=FALSE, sep="\t")
}
make_mutated_dna <- function(strand, dna_trans, m_point_2, m_ref, m_alt, trans_to, trans_from){
if(strand=="+"){
if(substr(dna_trans, m_point_2, m_point_2) == tolower(m_ref))
substr(dna_trans, m_point_2, m_point_2) <- tolower(m_alt)
} else {
print(substr(dna_trans, m_point_2, m_point_2))
print(tolower(m_ref))
print(trans_to[match(tolower(m_ref), trans_from)])
if(substr(dna_trans, m_point_2, m_point_2) == trans_to[match(tolower(m_ref), trans_from)])
substr(dna_trans, m_point_2, m_point_2) <- trans_to[match(tolower(m_alt), trans_from)]
}
return(dna_trans)
}
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file =  "data/sample.vep.txt.annovar_format.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.grch38.txt",
refmrna_file = "lib/refMrna.grch38.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
ls(all=T)
character(0)
rm(list=ls(all=TRUE))
for(rc in list.files("/Users/takaorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takaorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
data("sample_vcf")
head(sample_vcf, row.names = FALSE)
for(rc in list.files("/Users/takaorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takaorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
Result_HLA1_SNV <- MainSNVClass1(input_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
apply_annotation = FALSE,
MHCflurry = "mhctools")
MainSNVClass1
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
#'Calculate Neoantigen Candidates on SNVs for MHC Class1
#'
#'@param input_annovar_file An input vcf file annotated by ANNOVAR (http://annovar.openbioinformatics.org/en/latest/).
#'
#'See by data(sample_vcf); sample_vcf.txt;
#'
#'@param input_vep_format_file An input file annotated by Ensembl Variant Effect Predictor (VEP).
#'
#'@param input_vcf_format_file_and_vep A list of (1) An input vcf file, (2) path to Ensembl Variant Effect Predictor (VEP), and (3) cache file for VEP.
#'Before using this option, please install vep according to the official cite ("https://asia.ensembl.org/info/docs/tools/vep/index.html").
#'
#'@param hla_file A tab separated file indicating HLA types.
#'The 1st column is input_file name, and the following columns indicate HLA types.
#'
#'See by data(sample_hla_table_c1); sample_hla_table_c1;
#'
#'
#'@param hla_types Set a list of HLA types
#'
#'@param nm_id_column The column number describing NM IDs in input_file such as
#'
#'"SLCO1C1:NM_001145944:exon7:c.692_693insG:p.L231fs" (Default=NA).
#'
#'
#'
#'
#'
#'@param file_name_in_hla_table If the name (1st column) in HLA table is not the same as input_file, indicate the corresponding name.
#'
#'@param hmdir Home directory for the analysis (Default = getwd()).
#'
#'@param job_id Job-id to be attached in output files (Default = "NO_job_id").
#'
#'@param export_dir The directory will be stored results (Default = "paste("result", file_name_in_hla_table, job_id, sep=".")")
#'
#'@param peptide_length Peptide Length to be generated (Default = {8,9,10,11,12,13}).
#'
#'@param chr_column The column number describing chromosome number in input_file (Default=NA, but will automatically search "Chr" in header).
#'
#'@param mutation_start_column The column number describing mutation start Position in input_file (Default=NA, but will automatically search "Start" in header) .
#'
#'@param mutation_end_column The column number describing mutation end Position in input_file (Default=NA, but will automatically search "End" in header).
#'
#'@param mutation_ref_column The column number describing mutation Ref in input_file (Default=NA, but will automatically search "Ref" in header).
#'
#'@param mutation_alt_column The column number describing mutation Alt in input_file (Default=NA, but will automatically search "Alt" in header).
#'
#'@param depth_normal_column The column number describing the read count from normal cells (Default = NA).
#'
#'@param depth_tumor_column The column number describing the read count from tumor cells (Default = NA).
#'
#'@param ambiguous_between_exon The maximum number to permit the differences between Exon-Lengths from refFlat and refMrna (Default=0).
#'
#'@param ambiguous_codon The maximum number to permit the differences between inputfile- and refMrna-oriented translation start/end position (Default=0).
#'
#'@param refflat_file refFlat file to be used in constructing peptide. (Default=paste(hmdir, "lib/refFlat.txt", sep="").
#'
#'See "https://github.com/hase62/Neoantimon"
#'
#'@param refmrna_file refMrna file to be used in constructing peptide (Default=paste(hmdir, "lib/refMrna.fa", sep="").
#'
#'See "https://github.com/hase62/Neoantimon"
#'
#'@param rnaexp_file A file including RNA expressions (Default=NA).
#'The 1st, 2nd and 3rd columns are "GeneSymbol Chr:Exonstart-Exonend (locus) ExpressionAmount", respectively.
#'The 1st row should be any header.
#'
#'See by data(sample_rna_exp); sample_rna_exp;
#'
#'@param rnabam_file RNA bam file to calculate variant allele frequency of RNA at each mutation (Default=NA).
#'
#'@param refdna_file refdna_file information to be used to calculate RNA VAF (Default=NA).
#'
#'See "https://github.com/hase62/Neoantimon"
#'
#'@param cnv_file A file including copy number variation to calculate cancer cell fraction probability (CCFP) (Default=NA).
#'The format is according to ASCAT output files.
#'The columns are "SNPName Chromosome Position LogR segmentedLogR BAF segmentedBAF CopyNumber MinorAllele RawCopyNumber"
#'The 1st row should be the above header.
#'
#'See data(sample_copynum); sample_copynum;
#'
#'@param purity Tumor purity or tumor contents ratio required to calculate CCFP (Default=1).
#'
#'@param netMHCpan_dir The file directory to netMHCpan (Default="lib/netMHCpan-4.0/netMHCpan").
#'
#'@param MHCflurry Also output results using MHCflurry (Default=FALSE).
#'
#'@param samtools_dir The file directory to samtools_0_x_x (Default="samtools").
#'It shouled be indicated when you indicate RNA-bam and try to calculate RNA VAF.
#'
#'@param bcftools_dir The file directory to netMHCpan (Default="bcftools").
#'It shouled be indicated when you indicate RNA-bam and try to calculate RNA VAF .
#'samtools 0_x_x includes bcftools in the directory.
#'
#'@param IgnoreShortPeptides Ignore to output results of Short Peptide Less Than min (peptide_length)
#'
#'@param SNPs Apply indivisual SNPs on peptides by indicate a vcf file.
#'
#'@param multiple_variants Reflect multiple variants on a peptide, e.g., SNVs on frameshift region.
#'
#'@return void (Calculated Neoantigen Files will be generated as .tsv files.)
#'
#'@return HLA:  HLA type used to calculate neoantigen.
#'
#'@return Pos:  The position of a fraction of peptide used to be evaluated from the full-length peptide.
#'
#'@return Gene: Gene symbol used to be evaluated in NetMHCpan.
#'
#'@return Evaluated_Mutant_Peptide:  The mutant peptide to be evaluated.
#'
#'
#'
#'@return Mut_IC50: IC50 value for evaluated mutant peptide.
#'
#'@return Mut_Rank: Rank value for evaluated mutanat peptide.
#'
#'@return Evaluated_Wt_Peptide: The wild-type peptide to be evaluated.
#'
#'@return Wt_IC50: IC50 value for evaluated wild-type peptide.
#'
#'@return Wt_Rank: Rank value for evaluated wild-type peptide.
#'
#'@return Chr: Chromosome Number of the mutation.
#'
#'@return NM_ID: NM_ID used to construct peptides from the mutation.
#'
#'@return Change: The annotation to be described in .vcf file.
#'
#'@return Ref: reference type nucleic acid base.
#'
#'@return Alt: alternative type nucleic acid base.
#'
#'@return Prob: A probability of reference nucleic acid base described in .vcf file.
#'
#'@return Mutation_Prob: A probability of alternative nucleic acid base described in .vcf file.
#'
#'@return Exon_Start: The exon start position of the corrsponding NM_ID.
#'
#'@return Exon_End: The exon end position of the corrsponding NM_ID.
#'
#'@return Mutation_Position: The mutation position of the corrsponding NM_ID.
#'
#'@return Total_Depth: The sum depth of the reference and alternative nucleic acid base.
#'
#'@return Tumor_Depth: The depth of the alternative nucleic acid base.
#'
#'@return Wt_Peptide: The full-length of the wild-type peptide.
#'
#'@return Mutant_Peptide: The full-length of the mutant peptide.
#'
#'@return Total_RNA: The expression amount of the corresponding RNA.
#'
#'@return Tumor_RNA_Ratio: The variant allele frequency of the corresponding RNA.
#'
#'@return Tumor_RNA: The modified amount of the corresponding RNA level based on RNA Reads.
#'
#'@return Tumor_RNA_based_on_DNA: The modified amount of the corresponding RNA level based on DNA Reads.
#'
#'@return MutRatio: The mean value of the cancer cell fraction probability.
#'
#'@return MutRatio_Min: The 1\% percentile of the cancer cell fraction probability.
#'
#'@return MutRatio_Max: The 99\% percentile of the cancer cell fraction probability.
#'
#'@export
MainSNVClass1<-function(input_annovar_format_file = NA,
input_vep_format_file = NA,
input_vcf_format_file_and_vep = NA,
hla_file = "here_is_a_table",
hla_types = NA,
file_name_in_hla_table = "sample",
refflat_file = paste(hmdir, "lib/refFlat.txt", sep="/"),
refmrna_file = paste(hmdir, "lib/refMrna.fa", sep="/"),
hmdir = getwd(),
job_id = "ID",
export_dir = paste("result", job_id, "SNV1", sep="."),
rnaexp_file = NA,
rnabam_file = NA,
cnv_file=NA,
purity = 1,
netMHCpan_dir = paste(hmdir, "lib/netMHCpan-4.0/netMHCpan", sep="/"),
MHCflurry = NA,
refdna_file = NA,
samtools_dir = "samtools",
bcftools_dir = NA,
chr_column = NA,
mutation_start_column = NA,
mutation_end_column = NA,
mutation_ref_column = NA,
mutation_alt_column = NA,
nm_id_column = NA,
depth_normal_column = NA,
depth_tumor_column = NA,
ambiguous_between_exon = 0,
ambiguous_codon = 0,
peptide_length = c(8, 9, 10, 11, 12, 13),
IgnoreShortPeptides = TRUE,
SNPs = NA,
multiple_variants = FALSE){
#Obtain Data
if(Read_files(input_annovar_format_file, input_vep_format_file, input_vcf_format_file_and_vep)) return(NULL)
if(!is.na(input_vcf_format_file_and_vep)) input_vep_format_file <- annotation_by_vep(input_vcf_format_file_and_vep[1],
input_vcf_format_file_and_vep[2],
input_vcf_format_file_and_vep[3])
if(is.null(input_vep_format_file)) return(NULL)
if(!is.na(input_vep_format_file)) input_annovar_format_file <- convert_to_annovar_format_from_vep(input_vep_format_file)
#Get HLA-Type
if(file.exists(hla_file) & !is.na(hla_types[1])){
print(paste("Using:", hla_file))
}
if(file.exists(hla_file)){
hla_types <- getHLAtypes(hla_file, file_name_in_hla_table)
}
if(is.na(hla_types[1])) {
print("Please indicate hla_file and file_name_in_hla_table, or hla_types appropriately.")
return(NULL)
}
#Check Required Files
if(CheckRequiredFiles(input_file = input_annovar_format_file,
hla_types = hla_types,
refflat_file = refflat_file,
refmrna_file = refmrna_file)) return(NULL)
flg <- CheckRequiredColumns(input_file = input_annovar_format_file,
chr_column = chr_column,
mutation_start_column = mutation_start_column,
mutation_end_column = mutation_end_column,
mutation_ref_column = mutation_ref_column,
mutation_alt_column = mutation_alt_column,
nm_id_column = nm_id_column,
depth_normal_column = depth_normal_column,
depth_tumor_column = depth_tumor_column)
#Check and Set Required Columns
if(length(flg)<=1) return(NULL)
#Make Directory
if(!dir.exists(export_dir)) dir.create(export_dir, recursive = TRUE)
job_id <- paste(job_id, "SNV", sep = "_")
#Generate FASTA and mutation Profile
GenerateMutatedSeq(input_file = input_annovar_format_file,
hmdir = hmdir,
job_id = job_id,
refflat_file = refflat_file,
refmrna_file = refmrna_file,
max_peptide_length = max(peptide_length),
chr_column = flg[1],
mutation_start_column = flg[2],
mutation_end_column = flg[3],
mutation_ref_column = flg[4],
mutation_alt_column = flg[5],
nm_id_column = flg[6],
depth_normal_column = flg[7],
depth_tumor_column = flg[8],
ambiguous_between_exon = ambiguous_between_exon,
ambiguous_codon = ambiguous_codon,
export_dir = export_dir,
IgnoreShortPeptides = IgnoreShortPeptides,
SNPs = SNPs,
multiple_variants = multiple_variants,
apply_annotation = apply_annotation)
output_peptide_prefix <- paste(export_dir, "/", rev(strsplit(input_annovar_format_file, "/")[[1]])[1], ".", job_id, sep="")
output_peptide_txt_file <- paste(output_peptide_prefix, ".peptide.txt", sep="")
if(!file.exists(output_peptide_txt_file)){
print("Could not Generate Mutation File for Calculating Neoantigens. Finish.")
return(NULL)
}
RNAExpression(rnaexp_file,
output_peptide_txt_file,
width = 2,
samtools_dir,
refdna_file,
rnabam_file,
bcftools_dir,
indel = FALSE)
CCFP.Calc(cnv_file,
output_peptide_txt_file,
purity)
#NetMHCpan
if(is.na(netMHCpan_dir) | !file.exists(netMHCpan_dir)) {
print(paste("Did not find", netMHCpan_dir))
return(NULL)
}
#Execute NetMHCpan
ExeNetMHCpanClass1(output_peptide_prefix,
c("peptide", "wtpeptide"),
hla_types,
netMHCpan_dir,
peptide_length,
export_dir,
input_annovar_format_file,
job_id)
#Merge Results
result <- MergeSNVClass1(input_dir = export_dir,
file_prefix = paste(rev(strsplit(input_annovar_format_file, "/")[[1]])[1], job_id, sep = "."),
annotation_file = output_peptide_txt_file)
#Execute mhcflurry
if(!is.na(MHCflurry)){
ExemhcflurryClass1(netMHCpan_dir,
output_peptide_prefix,
c("peptide", "wtpeptide"),
hla_types,
peptide_length,
export_dir,
input_annovar_format_file,
job_id)
result_mhcflu <- InsertMhcflurryResults(result, output_peptide_prefix, hla_types)
print("Successfully Finished.")
return(list(result, result_mhcflu))
}
print("Successfully Finished.")
return(result)
}
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
setwd("~/Git/Neoantimon")
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
getwd()
install.packages("devtools")
library(devtools)
devtools::build_vignettes()
devtools::build_vignettes()
data("sample_vcf")
library(devtools);
library(Neoantimon);
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
getwd()
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
print(head(Result_HLA1_SNV[[1]]))
print(Export_Summary_SNV(Input = Result_HLA1_SNV[[1]], Mut_IC50_th = 500, Wt_IC50_th = 500))
Result_HLA2_SNV <- MainSNVClass2(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
apply_annotation = FALSE)
Result_HLA2_SNV <- MainSNVClass2(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE)
print(head(Result_HLA2_SNV))
print(Export_Summary_SNV(Input = Result_HLA2_SNV, Mut_IC50_th = 500, Wt_IC50_th = 500))
Result_HLA1_INDEL <- MainINDELClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "lib/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
