Mutation_Alt_Column = 5,
NM_ID_Column = 10,
Depth_Tumor_Column = 51,
Depth_Normal_Column = 53,
file_name_in_HLA_table = "sample",
HLA_file = "lib_sample/hla_table.txt",
RNAseq_file = "lib_sample/RNAseq.txt",
RNA_bam="lib_sample/RNAbam.bam",
CNV="lib_sample/Copy.txt",
Purity = 0.8,
ccfp_dir = "ccfp/ccfp.jar",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
refDNA = "lib/GRCh37.fa")
MainSNVClass1(hmdir = getwd(),
input_file = "lib_sample/sample_genomon.txt",
job_ID = "NO_JOB_ID",
Chr_Column = 1,
Mutation_Start_Column = 2,
Mutation_End_Column = 3,
Mutation_Ref_Column = 4,
Mutation_Alt_Column = 5,
NM_ID_Column = 10,
Depth_Tumor_Column = 51,
Depth_Normal_Column = 53,
file_name_in_HLA_table = "sample",
HLA_file = "lib_sample/hla_table.txt",
RNAseq_file = "lib_sample/RNAseq.txt",
RNA_bam="lib_sample/RNAbam.bam",
CNV="lib_sample/Copy.txt",
Purity = 0.8,
ccfp_dir = "ccfp/ccfp.jar",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
refDNA = "lib/GRCh37.fa")
library(Neoantimon)
library(Neoantimon)
MainSNVClass1(hmdir = getwd(),
input_file = "lib_sample/sample_genomon.txt",
job_ID = "NO_JOB_ID",
Chr_Column = 1,
Mutation_Start_Column = 2,
Mutation_End_Column = 3,
Mutation_Ref_Column = 4,
Mutation_Alt_Column = 5,
NM_ID_Column = 10,
Depth_Tumor_Column = 51,
Depth_Normal_Column = 53,
file_name_in_HLA_table = "sample",
HLA_file = "lib_sample/hla_table.txt",
RNAseq_file = "lib_sample/RNAseq.txt",
RNA_bam="lib_sample/RNAbam.bam",
CNV="lib_sample/Copy.txt",
Purity = 0.8,
ccfp_dir = "ccfp/ccfp.jar",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
refDNA = "lib/GRCh37.fa")
library("roxygen")
install.packages("roxygen")
install.packages("roxygen2")
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
devtools::check()
library("devtools")
install.packages("devtools")
library("devtools")
devtools::check()
devtools::check(manual = TRUE)
devtools::check(manual = TRUE,document = TRUE)
devtools::check_doc()
devtools::check_man()
devtools::check_cran()
install.packages("pkgs")
library(pkgs)
library("pkgs")
devtools::check(manual = TRUE,document = TRUE)
devtools::build_vignettes()
library("write.table")
install.packages("utils")
install.packages("utils")
install.packages("utils")
library(utils)
devtools::check(manual = TRUE,document = TRUE)
devtools::check(manual = TRUE,document = TRUE)
devtools::check(manual = TRUE,document = TRUE)
devtools::check(manual = TRUE,document = TRUE)
library(write.table)
library("write.table")
devtools::check(manual = TRUE,document = TRUE)
devtools::build_vignettes()
data("sample_copynum")
print(CopyNum, row.names = FALSE)
data("sample_vcf")
print(sample, row.names = FALSE)
library(Neoantimon)
data("sample_hla_table_c1")
print(hla_table, row.names = FALSE)
data("sample_hla_table_c2")
print(hla_table2, row.names = FALSE)
data("sample_rna_exp")
print(RNAseq, row.names = FALSE)
install.packages("devtools");
library(devtools);
install_github('hase62/Neoantimon');
install.packages("devtools")
#install.packages("devtools");
library(devtools);
install_github('hase62/Neoantimon');
library(Neoantimon);
#install.packages("devtools");
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
getwd()
setwd("~/Git/Neoantimon")
getwd()
list.files()
getwd()
data("sample_vcf")
print(sample_vcf, row.names = FALSE)
data("sample_vcf")
print(sample_vcf, row.names = FALSE)
#install.packages("devtools");
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
#install.packages("devtools");
library(devtools);
install_github('hase62/Neoantimon');
library(Neoantimon);
#install.packages("devtools");
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
#install.packages("devtools");
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
install_github('hase62/Neoantimon')
install_github('hase62/Neoantimon', force = TRUE)
#install.packages("devtools");
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
install_github('hase62/Neoantimon');
#install.packages("devtools");
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
install_github('hase62/Neoantimon');
library(Neoantimon);
devtools::check(manual = TRUE,document = TRUE)
library(Neoantimon)
devtools::check(manual = TRUE,document = TRUE)
library(Neoantimon)
data("data/sample_vcf.txt)
"")
")
data("sample_rna_exp")
data("sample_vcf")
sample_vcf
install_github('hase62/Neoantimon');
library(Neoantimon);
devtools::build_vignettes()
devtools::build()
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
matrix(nrow=3, ncol=3,c(0,0,1, 0,0,0, 1,1,1))
heatmap(matrix(nrow=3, ncol=3,c(0,0,1, 0,0,0, 1,1,1)))
heatmap(matrix(nrow=3, ncol=3,c(0,0,1, 0,0,0, 0,1,1)))
heatmap(matrix(nrow=3, ncol=3,c(0,0,1, 0,0,0, 0,1,1)), col=c(red, blues9))
heatmap(matrix(nrow=3, ncol=3,c(0,0,1, 0,0,0, 0,1,1)), col=c(red, blue))
heatmap(matrix(nrow=3, ncol=3,c(0,0,1, 0,0,0, 0,1,1)), col=c("red", "blue"))
heatmap(matrix(nrow=3, ncol=4,c(0,0,1, 0,0,0, 0,1,1, 1,1,1)), col=c("red", "blue"))
matrix(nrow=3, ncol=4,c(0,0,1, 0,0,0, 0,1,1, 1,1,1))
matrix(nrow=3, ncol=4,c(0,0,1, 0,0,0, 0,1,1, 1,1,1), Colv=NA)
heatmap(matrix(nrow=3, ncol=4,c(0,0,1, 0,0,0, 0,1,1, 1,1,1)), col=c("red", "blue"), Colv = NA)
install.packages("devtools")
install.packages("roxygen2")
install.packages("testthat")
library(roxygen2)
library(devtools)
library(testthat)
devtools::build_vignettes()
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
devtools::build_vignettes()
install_github('hase62/Neoantimon')
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
data("sample_result_SNV_CLASS1_ALL")
head(sample_result_SNV_CLASS1_ALL, row.names = FALSE)
library(Neoantimon)
library(Neoantimon)
data("sample_result_SNV_CLASS1_ALL")
head(sample_result_SNV_CLASS1_ALL, row.names = FALSE)
data("sample_result_SNV_CLASS2_ALL")
head(sample_result_SNV_CLASS2_ALL, row.names = FALSE)
data("sample_result_INDEL_CLASS1_ALL")
head(sample_result_INDEL_CLASS1_ALL, row.names = FALSE)
data("sample_result_INDEL_CLASS2_ALL")
head(sample_result_INDEL_CLASS2_ALL, row.names = FALSE)
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
devtools::build_vignettes()
devtools::build_vignettes()
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
library(Neoantimon)
TestAnalysis
build::vuignette
devtools::build_vignettes()
library(Neoantimon)
devtools::build_vignettes()
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
devtools::load_all(".")
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
install.packages("roxygen2")
install.packages("data.table")
install.packages("devtools")
Yes
install.packages("knitr")
install.packages("rmarkdown")
importFrom("grDevices", "dev.off", "pdf")
importFrom("graphics", "par", "plot")
importFrom("stats", "dbinom", "median", "pbinom", "runif")
importFrom("utils", "download.file", "write.table")
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
library(Neoantimon)
install.packages("data.table")
neo_dir <- "~/Github//Neoantimon/R"
Rs <- list.files(neo_dir)
for(r_code in Rs){
source(paste(neo_dir, r_code, sep = "/"))
}
if(TRUE){
input_file = "data/sample_vcf.txt"
file_name_in_hla_table = "sample"
hla_file = "data/sample_hla_table_c1.txt"
refflat_file  = "refFlat.txt"
refmrna_file = "refMrna.fa"
rnaexp_file = "data/sample_rna_exp.txt"
netMHCpan_dir = "netMHCpan-4.0/netMHCpan"
depth_tumor_column = 12
depth_normal_column = 14
hla_types = NA
hmdir = getwd()
refflat_file = paste(hmdir, "refFlat.txt", sep="/")
refmrna_file = paste(hmdir, "refMrna.fa", sep="/")
job_id = "ID"
export_dir = paste("result", job_id, "SNV1", sep=".")
rnaexp_file = NA
rnabam_file = NA
cnv_file=NA
purity = 1
netMHCpan_dir = paste(hmdir, "netMHCpan-4.0/netMHCpan", sep="/")
MHCflurry = "/Users/takanorihasegawa/opt/anaconda3/bin/mhctools"
refdna_file = NA
samtools_dir = NA
bcftools_dir = NA
chr_column = NA
mutation_start_column = NA
mutation_end_column = NA
mutation_ref_column = NA
mutation_alt_column = NA
nm_id_column = NA
depth_normal_column = NA
depth_tumor_column = NA
ambiguous_between_exon = 0
ambiguous_codon = 0
peptide_length = c(8, 9, 10, 11, 12, 13)
IgnoreShortPeptides = TRUE
}
#Get HLA-Type
if(file.exists(hla_file) & !is.na(hla_types[1])){
print(paste("Using:", hla_file))
}
if(file.exists(hla_file)){
hla_types <- getHLAtypes(hla_file, file_name_in_hla_table)
}
if(is.na(hla_types[1])) {
print("Please indicate hla_file and file_name_in_hla_table, or hla_types appropriately.")
return(NULL)
}
if(TRUE){
input_file = "data/sample_vcf.txt"
file_name_in_hla_table = "sample"
hla_file = "data/sample_hla_table_c1.txt"
refflat_file  = "refFlat.txt"
refmrna_file = "refMrna.fa"
rnaexp_file = "data/sample_rna_exp.txt"
netMHCpan_dir = "netMHCpan-4.0/netMHCpan"
depth_tumor_column = 12
depth_normal_column = 14
hla_types = NA
hmdir = getwd()
refflat_file = paste(hmdir, "refFlat.txt", sep="/")
refmrna_file = paste(hmdir, "refMrna.fa", sep="/")
job_id = "ID"
export_dir = paste("result", job_id, "SNV1", sep=".")
rnaexp_file = NA
rnabam_file = NA
cnv_file=NA
purity = 1
netMHCpan_dir = paste(hmdir, "netMHCpan-4.0/netMHCpan", sep="/")
MHCflurry = "/Users/takanorihasegawa/opt/anaconda3/bin/mhctools"
refdna_file = NA
samtools_dir = NA
bcftools_dir = NA
chr_column = NA
mutation_start_column = NA
mutation_end_column = NA
mutation_ref_column = NA
mutation_alt_column = NA
nm_id_column = NA
depth_normal_column = NA
depth_tumor_column = NA
ambiguous_between_exon = 0
ambiguous_codon = 0
peptide_length = c(8, 9, 10, 11, 12, 13)
IgnoreShortPeptides = TRUE
}
#Get HLA-Type
if(file.exists(hla_file) & !is.na(hla_types[1])){
print(paste("Using:", hla_file))
}
if(file.exists(hla_file)){
hla_types <- getHLAtypes(hla_file, file_name_in_hla_table)
}
neo_dir <- "~/Github//Neoantimon/R"
Rs <- list.files(neo_dir)
for(r_code in Rs){
source(paste(neo_dir, r_code, sep = "/"))
}
Rs
neo_dir <- "~/Github//Neoantimon/R"
neo_dir
neo_dir <- "~/Git/Neoantimon/R"
Rs <- list.files(neo_dir)
for(r_code in Rs){
source(paste(neo_dir, r_code, sep = "/"))
}
if(TRUE){
input_file = "data/sample_vcf.txt"
file_name_in_hla_table = "sample"
hla_file = "data/sample_hla_table_c1.txt"
refflat_file  = "refFlat.txt"
refmrna_file = "refMrna.fa"
rnaexp_file = "data/sample_rna_exp.txt"
netMHCpan_dir = "netMHCpan-4.0/netMHCpan"
depth_tumor_column = 12
depth_normal_column = 14
hla_types = NA
hmdir = getwd()
refflat_file = paste(hmdir, "refFlat.txt", sep="/")
refmrna_file = paste(hmdir, "refMrna.fa", sep="/")
job_id = "ID"
export_dir = paste("result", job_id, "SNV1", sep=".")
rnaexp_file = NA
rnabam_file = NA
cnv_file=NA
purity = 1
netMHCpan_dir = paste(hmdir, "netMHCpan-4.0/netMHCpan", sep="/")
MHCflurry = "/Users/takanorihasegawa/opt/anaconda3/bin/mhctools"
refdna_file = NA
samtools_dir = NA
bcftools_dir = NA
chr_column = NA
mutation_start_column = NA
mutation_end_column = NA
mutation_ref_column = NA
mutation_alt_column = NA
nm_id_column = NA
depth_normal_column = NA
depth_tumor_column = NA
ambiguous_between_exon = 0
ambiguous_codon = 0
peptide_length = c(8, 9, 10, 11, 12, 13)
IgnoreShortPeptides = TRUE
}
#Get HLA-Type
if(file.exists(hla_file) & !is.na(hla_types[1])){
print(paste("Using:", hla_file))
}
if(file.exists(hla_file)){
hla_types <- getHLAtypes(hla_file, file_name_in_hla_table)
}
if(is.na(hla_types[1])) {
print("Please indicate hla_file and file_name_in_hla_table, or hla_types appropriately.")
return(NULL)
}
#Check Required Files
if(CheckRequiredFiles(input_file = input_file,
hla_types = hla_types,
refflat_file = refflat_file,
refmrna_file = refmrna_file)) return(NULL)
hmdir
if(TRUE){
input_file = "data/sample_vcf.txt"
file_name_in_hla_table = "sample"
hla_file = "data/sample_hla_table_c1.txt"
refflat_file  = "refFlat.txt"
refmrna_file = "refMrna.fa"
rnaexp_file = "data/sample_rna_exp.txt"
netMHCpan_dir = "netMHCpan-4.0/netMHCpan"
depth_tumor_column = 12
depth_normal_column = 14
hla_types = NA
hmdir = getwd()
refflat_file = paste(hmdir, "refFlat.txt", sep="/")
refmrna_file = paste(hmdir, "refMrna.fa", sep="/")
job_id = "ID"
export_dir = paste("result", job_id, "SNV1", sep=".")
rnaexp_file = NA
rnabam_file = NA
cnv_file=NA
purity = 1
netMHCpan_dir = paste(hmdir, "netMHCpan-4.0/netMHCpan", sep="/")
MHCflurry = "/Users/takaorihasegawa/opt/anaconda3/bin/mhctools"
refdna_file = NA
samtools_dir = NA
bcftools_dir = NA
chr_column = NA
mutation_start_column = NA
mutation_end_column = NA
mutation_ref_column = NA
mutation_alt_column = NA
nm_id_column = NA
depth_normal_column = NA
depth_tumor_column = NA
ambiguous_between_exon = 0
ambiguous_codon = 0
peptide_length = c(8, 9, 10, 11, 12, 13)
IgnoreShortPeptides = TRUE
}
#Get HLA-Type
if(file.exists(hla_file) & !is.na(hla_types[1])){
print(paste("Using:", hla_file))
}
if(file.exists(hla_file)){
hla_types <- getHLAtypes(hla_file, file_name_in_hla_table)
}
if(is.na(hla_types[1])) {
print("Please indicate hla_file and file_name_in_hla_table, or hla_types appropriately.")
return(NULL)
}
#Check Required Files
if(CheckRequiredFiles(input_file = input_file,
hla_types = hla_types,
refflat_file = refflat_file,
refmrna_file = refmrna_file)) return(NULL)
