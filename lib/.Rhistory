for(j in 1:ncol(snp_tmp)){
uqamin <- unique(snp_tmp[, j])
if(!is.na(match("0 0", uqamin))){
uqamin <- uqamin[-match("0 0", uqamin)]
}
minor <- names(sort(sapply(uqamin, function(x) length(grep(x, snp_tmp[, j]))))[1])
if(length(unique(strsplit(minor, " ")[[1]])) == 2){
minor <- names(sort(sapply(uqamin, function(x) length(grep(x, snp_tmp[, j]))))[2])
}
uqamin <- gsub(unique(strsplit(minor, " ")[[1]]), "", uqamin)
uqamin <- gsub("0| ", "", uqamin)
major <- unique(strsplit(paste(uqamin, collapse = ""), "")[[1]])
major <- paste(major, major)
snp_tmp[, j] <- ifelse(snp_tmp[, j] == minor, 2, ifelse(snp_tmp[, j] == major | snp_tmp[, j] == "0 0", 0, 1))
}
colnames(snp_tmp) <- gsub("rs", "rsid", colnames(snp_tmp))
snp_hba1c <- snp_tmp[, which(apply(snp_tmp, 2, function(x) sum(as.numeric(x))) != 0)]
####################################################################
### AMY
####################################################################
pdf("AMY.Hist.pdf")
par(mfrow = c(2, 1))
for(cnv_file in grep("sum", grep("AMY", list.files(), value = TRUE), value = TRUE)){
cnv <- read.table(cnv_file, header = TRUE, row.names = 1, sep = "\t")
cnv_count <- cnv$CN_rounded
cnv_count <- cnv_count[cnv_count < mean(cnv_count) * 4]
plot(sort(cnv_count))
hist(cnv_count,  main = paste(cnv_file, mean(cnv_count)), breaks = seq(-0.5, 100.5, 1),
xlab = paste(cnv_file, "Copy Number"), col = "tan1", freq = FALSE,
xlim = c(min(cnv_count, na.rm = TRUE) - 0.5,
max(cnv_count, na.rm = TRUE) + 0.5))
cnv_count <- cnv$CN_raw
cnv_count <- cnv_count[cnv_count < mean(cnv_count) * 4]
plot(sort(cnv_count))
hist(cnv_count,  main = paste(cnv_file, mean(cnv_count)), breaks = seq(-0.25, 100.25, 0.25),
xlab = paste(cnv_file, "Copy Number"), col = "tan1", freq = FALSE,
xlim = c(min(cnv_count, na.rm = TRUE) - 0.25,
max(cnv_count, na.rm = TRUE) + 0.25))
}
dev.off()
for(cnv_file in grep("hirosaki", grep("AMY", list.files(), value = TRUE), value = TRUE)){
cnv <- read.table(cnv_file, header = TRUE, row.names = 1, sep = "\t")
tmp <- sapply(que_wgs_snp_unq_2014, function(x) grep(sub("H", "", x), rownames(cnv)))
cnv_raw_count <- cnv$CN_raw[tmp]
cnv_round_count <- cnv$CN_rounded[tmp]
wgs_snp_unq_2014 <- cbind(wgs_snp_unq_2014, cnv_raw_count, cnv_round_count)
colnames(wgs_snp_unq_2014)[(ncol(wgs_snp_unq_2014) - 1):ncol(wgs_snp_unq_2014)] <- paste(cnv_file, c("raw", "round"), sep = ".")
tmp <- sapply(que_wgs_snp_unq_2015, function(x) grep(sub("H", "", x), rownames(cnv)))
tmp <- unlist(lapply(tmp, function(x) ifelse(is.null(x), NA, x)))
cnv_raw_count <- cnv$CN_raw[tmp]
cnv_round_count <- cnv$CN_rounded[tmp]
wgs_snp_unq_2015 <- cbind(wgs_snp_unq_2015, cnv_raw_count, cnv_round_count)
colnames(wgs_snp_unq_2015)[(ncol(wgs_snp_unq_2015) - 1):ncol(wgs_snp_unq_2015)] <- paste(cnv_file, c("raw", "round"), sep = ".")
}
wgs_snp_unq_2014 <- cbind(wgs_snp_unq_2014, saiketsu_2014[match(wgs_snp_unq_2014[, 1], saiketsu_2014[, 2]), 1])
wgs_snp_unq_2015 <- cbind(wgs_snp_unq_2015, saiketsu_2015[match(wgs_snp_unq_2015[, 1], saiketsu_2015[, 2]), 1])
colnames(wgs_snp_unq_2014)[ncol(wgs_snp_unq_2014)] <- "ID"
colnames(wgs_snp_unq_2015)[ncol(wgs_snp_unq_2015)] <- "ID"
id_id <- read.table("2017_IDTable.txt", header = TRUE, sep = "\t")
wgs_snp_unq_2014 <- cbind(wgs_snp_unq_2014, id_id[match(wgs_snp_unq_2014[, ncol(wgs_snp_unq_2014)], id_id[, 11]), 1])
wgs_snp_unq_2015 <- cbind(wgs_snp_unq_2015, id_id[match(wgs_snp_unq_2015[, ncol(wgs_snp_unq_2015)], id_id[, 12]), 1])
colnames(wgs_snp_unq_2014)[ncol(wgs_snp_unq_2014)] <- "uID"
colnames(wgs_snp_unq_2015)[ncol(wgs_snp_unq_2014)] <- "uID"
wgs_snp_unq <- rbind(wgs_snp_unq_2014, wgs_snp_unq_2015)
ls(all=T)
character(0)
rm(list=ls(all=TRUE))
apply2<-function(x, y, z){
if(is.null(dim(x))){
return(z(x))
} else {
return(apply(x, y, z))
}
}
library(MASS)
library(multcomp)
#install.packages("DescTools")
#install.packages("robustbase")
#install.packages("bestNormalize")
#install.packages("HardyWeinberg")
#install.packages("Rtsne")
library(ggplot2)
#library(Rtsne)
library(gplots)
library("bestNormalize")
#library(DescTools)
#library(robustbase)
#library(HardyWeinberg)
library("ranger")
#library(metafor)
ste <- function(x, na.rm = TRUE) sqrt(var(x, na.rm = TRUE)/length(which(!is.na(x))))
####
##Observed Values
####
cyid_id <- read.table("./../iwaki_mv181003_csv/iwaki_181003_cypherid_and_projectid_list.csv", header = TRUE, sep = ",")
data_2005_2017 <- NULL
for(file in paste("./../iwaki_mv181003_csv/iwaki_mv181003_", 2017:2005, ".csv", sep = "")){
year <- gsub(".csv", "", strsplit(file, "_")[[1]][5])
if(is.null(data_2005_2017)){
data_2005_2017 <- read.table(file, header = TRUE, sep = ",")
data_2005_2017 <- cbind(year, data_2005_2017)
colnames(data_2005_2017)[1] <- "Year"
} else {
data_tmp <- read.table(file, header = TRUE, sep = ",")
data_tmp <- cbind(year, data_tmp)
colnames(data_tmp)[1] <- "Year"
index <- match(colnames(data_2005_2017), colnames(data_tmp))
index <- ifelse(is.na(index), 1, index)
data_tmp <- data_tmp[, index]
colnames(data_tmp) <- colnames(data_2005_2017)
data_2005_2017 <- rbind(data_2005_2017, data_tmp)
}
}
data_2005_2017[, 2] <- cyid_id[match(data_2005_2017[, 2], cyid_id[, 2]), 1]
colnames(data_2005_2017)[2] <- "uniq_id"
###
##Data for 2018 and
###
data_sol_2017_h <- scan("./../RawData/health-check-2017.cut.txt", "character", nlines = 1, sep = "\t")
data_sol_2017 <- scan("./../RawData/health-check-2017.cut.txt", "character", sep = "\n", skip = 1)
data_sol_2017 <- t(sapply(data_sol_2017, function(x) strsplit(x, "\t")[[1]][1:length(data_sol_2017_h)]))
data_sol_2018_h <- scan("./../RawData/health-check-2018.cut.txt", "character", nlines = 1, sep = "\t")
data_sol_2018 <- scan("./../RawData/health-check-2018.cut.txt", "character", sep = "\n", skip = 1)
data_sol_2018 <- t(sapply(data_sol_2018, function(x) strsplit(x, "\t")[[1]][1:length(data_sol_2018_h)]))
rownames(data_sol_2017) <- NULL
colnames(data_sol_2017) <- data_sol_2017_h
rownames(data_sol_2018) <- NULL
colnames(data_sol_2018) <- data_sol_2018_h
colnames(data_sol_2017)[1] <- colnames(data_sol_2018)[1]  <- "uniq_id"
colnames(data_sol_2017)[3] <- colnames(data_sol_2018)[3]  <- "Year"
colnames(data_sol_2017)[28] <- colnames(data_sol_2018)[28]  <- "HbA1c"
colnames(data_sol_2017)[18] <- colnames(data_sol_2018)[18]  <- "BMI"
colnames(data_sol_2017)[13] <- colnames(data_sol_2018)[13]  <- "年齢"
colnames(data_sol_2017)[12] <- colnames(data_sol_2018)[12]  <- "性別"
colnames(data_sol_2017)[34] <- colnames(data_sol_2018)[34]  <- "喫煙飲酒_喫煙"
colnames(data_sol_2017)[34] <- colnames(data_sol_2018)[35]  <- "喫煙飲酒_飲酒"
colnames(data_sol_2017)[32] <- colnames(data_sol_2018)[32]  <- "運動習慣_スポーツ_冬以外_F"
colnames(data_sol_2017)[33] <- colnames(data_sol_2018)[33]  <- "運動習慣_スポーツ_冬_F"
colnames(data_sol_2017)[4] <- colnames(data_sol_2018)[4]  <- "高血圧治療薬"
colnames(data_sol_2017)[5] <- colnames(data_sol_2018)[5]  <- "高脂血症治療薬"
colnames(data_sol_2017)[6] <- colnames(data_sol_2018)[6]  <- "糖尿病治療薬"
colnames(data_sol_2017)[11] <- colnames(data_sol_2018)[11]  <- "副腎皮質ステロイド"
colnames(data_sol_2017)[10] <- colnames(data_sol_2018)[10]  <- "抗生剤"
colnames(data_sol_2017)[58] <- colnames(data_sol_2018)[58]  <- "クレアチニン"
colnames(data_sol_2017)[52] <- colnames(data_sol_2018)[52]  <- "総ビリルビン"
colnames(data_sol_2017)[57] <- colnames(data_sol_2018)[57]  <- "ALB_改良BCP法"
id_trans_table <- read.table("./../RawData/PersonalID_4件修正_20190312.txt", header = TRUE, sep = "\t")
data_sol_2018[, 1] <- as.character(id_trans_table[match(data_sol_2018[, 2], id_trans_table[, grep("2018", colnames(id_trans_table))]), 1])
####
##WGS
####
wgs_snp <- read.table("wgs_snp.txt", header = TRUE, sep = "\t")
wgs_snp_unq <- wgs_snp[match(unique(wgs_snp[, 3]), wgs_snp[, 3]), ]
matching_table <- read.table("./../RawData/MatchingTable.txt", header = FALSE, sep = "\t")
wgs_snp_unq_2014 <- wgs_snp_unq[grep("PG2444|PG2710", wgs_snp_unq[, 3]), ]
wgs_snp_unq_2015 <- wgs_snp_unq[grep("PG2444|PG2710", wgs_snp_unq[, 3], invert = TRUE), ]
que_wgs_snp_unq_2014 <- sapply(as.character(wgs_snp_unq_2014[, 4]),
function(x) paste(strsplit(x, "_")[[1]][c(1, 2, 3, 4)], collapse = "_"))
que_wgs_snp_unq_2015 <- sapply(as.character(wgs_snp_unq_2015[, 4]),
function(x) paste(strsplit(x, "_")[[1]][c(1, 2, 3, 4)], collapse = "_"))
saiketsu_2014 <- read.table("2014saiketsu_table.txt", header = FALSE, sep = "\t")
saiketsu_2015 <- read.table("2015saiketsu_table.txt", header = FALSE, sep = "\t")
####
##Relatedness
####
rlt <- read.table("./../Relatedness/2015b_2016_2017_merged.chid.pca.evec.csv", header = FALSE, sep = "\t")
chid <- read.table("./../Relatedness/2015b_2016_2017_merged.chid.txt", header = FALSE, sep = "\t")
rlt[, 1] <- chid[match(rlt[, 2], paste(chid[, 3], chid[, 3], sep = ":")), 1]
mtable <- scan("./../RawData/MatchingTable.txt", "character", sep = "\t")
mtable <- matrix(ncol = 5, byrow = TRUE, mtable)
mtable <- gsub("_\\(Axiom_TSB_JPA1\\)", "", mtable)
mtable <- gsub(".CEL", "", mtable)
mtable <- gsub(".AxiomGT1", "", mtable)
rlt[, 1] <- gsub("_\\(Axiom_TSB_JPA1\\)", "", rlt[, 1])
rlt[, 1] <- gsub(".CEL", "", rlt[, 1])
rlt[, 1] <- gsub(".AxiomGT1", "", rlt[, 1])
m2014 <- match(rlt[, 1], mtable[,2])
m2015 <- match(rlt[, 1], mtable[,3])
m2016 <- match(rlt[, 1], mtable[,4])
m2017 <- match(rlt[, 1], mtable[,5])
rlt[, 1] <- mtable[ifelse(!is.na(m2014), m2014,
ifelse(!is.na(m2015), m2015,
ifelse(!is.na(m2016), m2016,
m2017))), 1]
####################################################################
### SNPs bmi
####################################################################
snp_n <- scan("gwas.extracted.bmi.snps.th6.rsid.addref/gwas.extracted.bmi.snps.th6.rsid.addref.ped", "character", sep = "\n")
snp <- scan("gwas.extracted.bmi.snps.th6.rsid.addref/gwas.extracted.bmi.snps.th6.rsid.addref.ped", "character", sep = " ")
snp <- matrix(nrow = length(snp_n), byrow = TRUE, snp)
id_snp <- snp[, 1]
snp <- sapply((3:(ncol(snp) / 2 - 1)) * 2 + 1,
function(x) paste(snp[, x], snp[, x + 1]))
snp <- gsub("G A", "A G", snp)
snp <- gsub("T A", "A T", snp)
snp <- gsub("C A", "A C", snp)
snp <- gsub("G C", "C G", snp)
snp <- gsub("T C", "C T", snp)
snp <- gsub("T G", "G T", snp)
rownames(snp) <- id_snp
rs <- scan("gwas.extracted.bmi.snps.th6.rsid.addref/gwas.extracted.bmi.snps.th6.rsid.addref.map", "character", sep = "\t")
rs <- matrix(ncol = 4, byrow = TRUE, rs)
colnames(snp) <- rs[, 2]
snp <- snp[, apply(snp, 2, function(x) length(unique(x))) > 1]
mtable <- scan("./../RawData/MatchingTable.txt", "character", sep = "\t")
mtable <- matrix(ncol = 5, byrow = TRUE, mtable)
mtable <- gsub("_\\(Axiom_TSB_JPA1\\)", "", mtable)
mtable <- gsub(".CEL", "", mtable)
mtable <- gsub(".AxiomGT1", "", mtable)
rownames(snp) <- gsub("_\\(Axiom_TSB_JPA1\\)", "", rownames(snp))
rownames(snp) <- gsub(".CEL", "", rownames(snp))
rownames(snp) <- gsub(".AxiomGT1", "", rownames(snp))
m2014 <- match(rownames(snp), mtable[,2])
m2015 <- match(rownames(snp), mtable[,3])
m2016 <- match(rownames(snp), mtable[,4])
m2017 <- match(rownames(snp), mtable[,5])
rownames(snp) <-mtable[ifelse(!is.na(m2014), m2014,
ifelse(!is.na(m2015), m2015,
ifelse(!is.na(m2016), m2016,
m2017))), 1]
snp <- snp[!is.na(rownames(snp)), ]
snp_tmp <- snp
for(j in 1:ncol(snp_tmp)){
uqamin <- unique(snp_tmp[, j])
if(!is.na(match("0 0", uqamin))){
uqamin <- uqamin[-match("0 0", uqamin)]
}
minor <- names(sort(sapply(uqamin, function(x) length(grep(x, snp_tmp[, j]))))[1])
if(length(unique(strsplit(minor, " ")[[1]])) == 2){
minor <- names(sort(sapply(uqamin, function(x) length(grep(x, snp_tmp[, j]))))[2])
}
uqamin <- gsub(unique(strsplit(minor, " ")[[1]]), "", uqamin)
uqamin <- gsub("0| ", "", uqamin)
major <- unique(strsplit(paste(uqamin, collapse = ""), "")[[1]])
major <- paste(major, major)
snp_tmp[, j] <- ifelse(snp_tmp[, j] == minor, 2, ifelse(snp_tmp[, j] == major | snp_tmp[, j] == "0 0", 0, 1))
}
colnames(snp_tmp) <- gsub("rs", "rsid", colnames(snp_tmp))
snp_bmi <- snp_tmp[, which(apply(snp_tmp, 2, function(x) sum(as.numeric(x))) != 0)]
####################################################################
### SNPs hba1c
####################################################################
snp_n <- scan("gwas.extracted.hba1c.snps.th6.rsid.addref/gwas.extracted.hba1c.snps.th6.rsid.addref.txt.ped", "character", sep = "\n")
snp <- scan("gwas.extracted.hba1c.snps.th6.rsid.addref/gwas.extracted.hba1c.snps.th6.rsid.addref.txt.ped", "character", sep = " ")
snp <- matrix(nrow = length(snp_n), byrow = TRUE, snp)
id_snp <- snp[, 1]
snp <- sapply((3:(ncol(snp) / 2 - 1)) * 2 + 1,
function(x) paste(snp[, x], snp[, x + 1]))
snp <- gsub("G A", "A G", snp)
snp <- gsub("T A", "A T", snp)
snp <- gsub("C A", "A C", snp)
snp <- gsub("G C", "C G", snp)
snp <- gsub("T C", "C T", snp)
snp <- gsub("T G", "G T", snp)
rownames(snp) <- id_snp
rs <- scan("gwas.extracted.hba1c.snps.th6.rsid.addref/gwas.extracted.hba1c.snps.th6.rsid.addref.txt.map", "character", sep = "\t")
rs <- matrix(ncol = 4, byrow = TRUE, rs)
colnames(snp) <- rs[, 2]
snp <- snp[, apply(snp, 2, function(x) length(unique(x))) > 1]
mtable <- scan("./../RawData/MatchingTable.txt", "character", sep = "\t")
mtable <- matrix(ncol = 5, byrow = TRUE, mtable)
mtable <- gsub("_\\(Axiom_TSB_JPA1\\)", "", mtable)
mtable <- gsub(".CEL", "", mtable)
mtable <- gsub(".AxiomGT1", "", mtable)
rownames(snp) <- gsub("_\\(Axiom_TSB_JPA1\\)", "", rownames(snp))
rownames(snp) <- gsub(".CEL", "", rownames(snp))
rownames(snp) <- gsub(".AxiomGT1", "", rownames(snp))
m2014 <- match(rownames(snp), mtable[,2])
m2015 <- match(rownames(snp), mtable[,3])
m2016 <- match(rownames(snp), mtable[,4])
m2017 <- match(rownames(snp), mtable[,5])
rownames(snp) <-mtable[ifelse(!is.na(m2014), m2014,
ifelse(!is.na(m2015), m2015,
ifelse(!is.na(m2016), m2016,
m2017))), 1]
snp <- snp[!is.na(rownames(snp)), ]
snp_tmp <- snp
for(j in 1:ncol(snp_tmp)){
uqamin <- unique(snp_tmp[, j])
if(!is.na(match("0 0", uqamin))){
uqamin <- uqamin[-match("0 0", uqamin)]
}
minor <- names(sort(sapply(uqamin, function(x) length(grep(x, snp_tmp[, j]))))[1])
if(length(unique(strsplit(minor, " ")[[1]])) == 2){
minor <- names(sort(sapply(uqamin, function(x) length(grep(x, snp_tmp[, j]))))[2])
}
uqamin <- gsub(unique(strsplit(minor, " ")[[1]]), "", uqamin)
uqamin <- gsub("0| ", "", uqamin)
major <- unique(strsplit(paste(uqamin, collapse = ""), "")[[1]])
major <- paste(major, major)
snp_tmp[, j] <- ifelse(snp_tmp[, j] == minor, 2, ifelse(snp_tmp[, j] == major | snp_tmp[, j] == "0 0", 0, 1))
}
colnames(snp_tmp) <- gsub("rs", "rsid", colnames(snp_tmp))
snp_hba1c <- snp_tmp[, which(apply(snp_tmp, 2, function(x) sum(as.numeric(x))) != 0)]
####################################################################
### AMY
####################################################################
pdf("AMY.Hist.pdf")
par(mfrow = c(2, 1))
for(cnv_file in grep("sum", grep("AMY", list.files(), value = TRUE), value = TRUE)){
cnv <- read.table(cnv_file, header = TRUE, row.names = 1, sep = "\t")
cnv_count <- cnv$CN_rounded
cnv_count <- cnv_count[cnv_count < mean(cnv_count) * 4]
plot(sort(cnv_count))
hist(cnv_count,  main = paste(cnv_file, mean(cnv_count)), breaks = seq(-0.5, 100.5, 1),
xlab = paste(cnv_file, "Copy Number"), col = "tan1", freq = FALSE,
xlim = c(min(cnv_count, na.rm = TRUE) - 0.5,
max(cnv_count, na.rm = TRUE) + 0.5))
cnv_count <- cnv$CN_raw
cnv_count <- cnv_count[cnv_count < mean(cnv_count) * 4]
plot(sort(cnv_count))
hist(cnv_count,  main = paste(cnv_file, mean(cnv_count)), breaks = seq(-0.25, 100.25, 0.25),
xlab = paste(cnv_file, "Copy Number"), col = "tan1", freq = FALSE,
xlim = c(min(cnv_count, na.rm = TRUE) - 0.25,
max(cnv_count, na.rm = TRUE) + 0.25))
}
dev.off()
for(cnv_file in grep("hirosaki", grep("AMY", list.files(), value = TRUE), value = TRUE)){
cnv <- read.table(cnv_file, header = TRUE, row.names = 1, sep = "\t")
tmp <- sapply(que_wgs_snp_unq_2014, function(x) grep(sub("H", "", x), rownames(cnv)))
cnv_raw_count <- cnv$CN_raw[tmp]
cnv_round_count <- cnv$CN_rounded[tmp]
wgs_snp_unq_2014 <- cbind(wgs_snp_unq_2014, cnv_raw_count, cnv_round_count)
colnames(wgs_snp_unq_2014)[(ncol(wgs_snp_unq_2014) - 1):ncol(wgs_snp_unq_2014)] <- paste(cnv_file, c("raw", "round"), sep = ".")
tmp <- sapply(que_wgs_snp_unq_2015, function(x) grep(sub("H", "", x), rownames(cnv)))
tmp <- unlist(lapply(tmp, function(x) ifelse(is.null(x), NA, x)))
cnv_raw_count <- cnv$CN_raw[tmp]
cnv_round_count <- cnv$CN_rounded[tmp]
wgs_snp_unq_2015 <- cbind(wgs_snp_unq_2015, cnv_raw_count, cnv_round_count)
colnames(wgs_snp_unq_2015)[(ncol(wgs_snp_unq_2015) - 1):ncol(wgs_snp_unq_2015)] <- paste(cnv_file, c("raw", "round"), sep = ".")
}
wgs_snp_unq_2014 <- cbind(wgs_snp_unq_2014, saiketsu_2014[match(wgs_snp_unq_2014[, 1], saiketsu_2014[, 2]), 1])
wgs_snp_unq_2015 <- cbind(wgs_snp_unq_2015, saiketsu_2015[match(wgs_snp_unq_2015[, 1], saiketsu_2015[, 2]), 1])
colnames(wgs_snp_unq_2014)[ncol(wgs_snp_unq_2014)] <- "ID"
colnames(wgs_snp_unq_2015)[ncol(wgs_snp_unq_2015)] <- "ID"
id_id <- read.table("2017_IDTable.txt", header = TRUE, sep = "\t")
wgs_snp_unq_2014 <- cbind(wgs_snp_unq_2014, id_id[match(wgs_snp_unq_2014[, ncol(wgs_snp_unq_2014)], id_id[, 11]), 1])
wgs_snp_unq_2015 <- cbind(wgs_snp_unq_2015, id_id[match(wgs_snp_unq_2015[, ncol(wgs_snp_unq_2015)], id_id[, 12]), 1])
colnames(wgs_snp_unq_2014)[ncol(wgs_snp_unq_2014)] <- "uID"
colnames(wgs_snp_unq_2015)[ncol(wgs_snp_unq_2014)] <- "uID"
wgs_snp_unq <- rbind(wgs_snp_unq_2014, wgs_snp_unq_2015)
library(hexbin)
pdf("AMY.Cor.pdf")
cor.r <- cor.test(wgs_snp_unq_2014$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2014$AMY2A.hirosaki.sum.ext.txt.round)$estimate
p.val <-cor.test(wgs_snp_unq_2014$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2014$AMY2A.hirosaki.sum.ext.txt.round)$p.value
plot(hexbin(wgs_snp_unq_2014$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2014$AMY2A.hirosaki.sum.ext.txt.round, xbnds = c(0, 25), ybnds = c(0, 5)),
xlab = "AMY1.2014", ylab = "AMY2A.2014", main = paste(cor.r, "\n", p.val))
cor.r <- cor.test(wgs_snp_unq_2015$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2015$AMY2A.hirosaki.sum.ext.txt.round)$estimate
p.val <-cor.test(wgs_snp_unq_2015$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2015$AMY2A.hirosaki.sum.ext.txt.round)$p.value
plot(hexbin(wgs_snp_unq_2015$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2015$AMY2A.hirosaki.sum.ext.txt.round, xbnds = c(0, 25), ybnds = c(0, 5)),
xlab = "AMY1.2015", ylab = "AMY2A.2015", main = paste(cor.r, "\n", p.val))
cor.r <- cor.test(wgs_snp_unq_2014$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2014$AMY2B.hirosaki.sum.ext.txt.round)$estimate
p.val <-cor.test(wgs_snp_unq_2014$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2014$AMY2B.hirosaki.sum.ext.txt.round)$p.value
plot(hexbin(wgs_snp_unq_2014$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2014$AMY2B.hirosaki.sum.ext.txt.round, xbnds = c(0, 25), ybnds = c(0, 5)),
xlab = "AMY1.2014", ylab = "AMY2B.2014", main = paste(cor.r, "\n", p.val))
cor.r <- cor.test(wgs_snp_unq_2015$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2015$AMY2B.hirosaki.sum.ext.txt.round)$estimate
p.val <-cor.test(wgs_snp_unq_2015$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2015$AMY2B.hirosaki.sum.ext.txt.round)$p.value
plot(hexbin(wgs_snp_unq_2015$AMY1.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2015$AMY2B.hirosaki.sum.ext.txt.round, xbnds = c(0, 25), ybnds = c(0, 5)),
xlab = "AMY1.2015", ylab = "AMY2B.2015", main = paste(cor.r, "\n", p.val))
cor.r <- cor.test(wgs_snp_unq_2014$AMY2A.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2014$AMY2B.hirosaki.sum.ext.txt.round)$estimate
p.val <-cor.test(wgs_snp_unq_2014$AMY2A.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2014$AMY2B.hirosaki.sum.ext.txt.round)$p.value
plot(hexbin(wgs_snp_unq_2014$AMY2A.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2014$AMY2B.hirosaki.sum.ext.txt.round, xbnds = c(0, 5), ybnds = c(0, 4)),
xlab = "AMY2A.2014", ylab = "AMY2B.2014", main = paste(cor.r, "\n", p.val))
cor.r <- cor.test(wgs_snp_unq_2015$AMY2A.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2015$AMY2B.hirosaki.sum.ext.txt.round)$estimate
p.val <-cor.test(wgs_snp_unq_2015$AMY2A.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2015$AMY2B.hirosaki.sum.ext.txt.round)$p.value
plot(hexbin(wgs_snp_unq_2015$AMY2A.hirosaki.sum.ext.txt.round,
wgs_snp_unq_2015$AMY2B.hirosaki.sum.ext.txt.round, xbnds = c(0, 5), ybnds = c(0, 4)),
xlab = "AMY2A.2015", ylab = "AMY2B.2015", main = paste(cor.r, "\n", p.val))
dev.off()
getwd()
library(devtools);
v
install_github('hase62/Neoantimon');
library(Neoantimon);
setwd("~/Github/Neoantimon/lib")
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "mhctools")
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
print(head(Result_HLA1_SNV[[1]]))
print(Export_Summary_SNV(Input = Result_HLA1_SNV[[1]], Mut_IC50_th = 500, Wt_IC50_th = 500))
Result_HLA1_INDEL <- MainINDELClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.txt",
refmrna_file = "refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
getwd()
Result_HLA1_INDEL <- MainINDELClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
Result_HLA1_INDEL <- MainINDELClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
Result_HLA1_INDEL <- MainINDELClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
Result_HLA2_SNV <- MainSNVClass2(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE)
Result_HLA2_INDEL <- MainINDELClass2(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE)
Result_HLA1_SV <- MainSVFUSIONClass1(input_file = "data/sample_sv_bnd.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
refdna_file = "GRCh37.fa",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8)
