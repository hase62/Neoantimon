sort(L_I)
tail(sort(L_I))
L_R <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Mut_Rank", colnames(result))]) - 500)))
L_R
L_R <- 1 / (1 + exp(5 * (as.numeric(result[, match("Mut_Rank", colnames(result))]) - 2)))
L_R
j <- match("Wt_IC50", colnames(result))
j
L_I_W <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Wt_IC50", colnames(result))]) - 500)))
L_R_W <- 1 / (1 + exp(5 * (as.numeric(result[, match("Wt_Rank", colnames(result))]) - 2)))
L_I_W
P_I <-  L_I_M * tanh(gA * E) * (1 - M * L_I_W)
L_I_M <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Mut_IC50", colnames(result))]) - 500)))
L_R_M <- 1 / (1 + exp(5 * (as.numeric(result[, match("Mut_Rank", colnames(result))]) - 2)))
j <- match("Wt_IC50", colnames(result))
if(!is.na(j)){
L_I_W <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Wt_IC50", colnames(result))]) - 500)))
L_R_W <- 1 / (1 + exp(5 * (as.numeric(result[, match("Wt_Rank", colnames(result))]) - 2)))
}
P_I <-  L_I_M * tanh(gA * E) * (1 - M * L_I_W)
P_I
tail(sort(P_I))
tanh(gA * E)
colnames(reuslt)
colnames(result)
j_4 <- match("MutRatio", colnames(result))
j_4
j_4 <- match("MutRatio", colnames(result))
is.na(result[, j_4])
C <- 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8)))
C
j_4 <- match("MutRatio", colnames(result))
ifelse(is.na(result[, j_4]))
C <- 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8)))
j_4 <- match("MutRatio", colnames(result))
ifelse(is.na(result[, j_4]))
C <- 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8)))
} else {
C <- 1
}
if(is.na(result[, j_4])){
C <- 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8)))
} else {
C <- 1
}
j_4 <- match("MutRatio", colnames(result))
if(is.na(result[, j_4])){
C <- 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8)))
} else {
C <- 1
}
C <- ifelse(!is.na(result[, j_4])), 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result)))
vaf <- result[, match("Tumor_Depth", colnames(result)] / result[, match("Total_Depth", colnames(result)]
}
gA <- ifelse(is.na(vaf), tanh(5 * 0.5), tanh(5 * vaf))
E <- as.numeric(result[, match("Total_RNA", colnames(result))])
j1 <- match("Evaluated_Mutant_Peptide", colnames(result))
j2 <- match("Evaluated_Wt_Peptide", colnames(result))
if(!is.na(j2)) {
M <- sapply(1:nrow(result),
function(i){
m <- strsplit(result[i, j1], "")[[1]]
w <- strsplit(result[i, j2], "")[[1]]
if(length(w) - length(m) < 0){
M <- 2^-length(m)
} else {
M <- 2^-min(sapply(seq(1, length(w) - length(m) + 1, 1),
function(point) length(m) - length(which(m == w[point:(point + length(m) - 1)]))))
}
return(M)
})
} else {
M <- 0
}
L_I_M <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Mut_IC50", colnames(result))]) - 500)))
L_R_M <- 1 / (1 + exp(5 * (as.numeric(result[, match("Mut_Rank", colnames(result))]) - 2)))
j_3 <- match("Wt_IC50", colnames(result))
if(!is.na(j_3)){
L_I_W <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Wt_IC50", colnames(result))]) - 500)))
L_R_W <- 1 / (1 + exp(5 * (as.numeric(result[, match("Wt_Rank", colnames(result))]) - 2)))
} else {
L_I_W <- 0
L_R_W <- 0
}
j_4 <- match("MutRatio", colnames(result))
C <- ifelse(!is.na(result[, j_4])), 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result)))
P_I <-  L_I_M * tanh(gA * E) * (1 - M * L_I_W)
}
rep(1, nrow(result))
C <- ifelse(!is.na(result[, j_4]), 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result))))
C <- ifelse(!is.na(result[, j_4]), 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result)))
!is.na(result[, j_4])
j_4 <- match("MutRatio", colnames(result))
result[, j_4]
result[1,]
C <- ifelse(!is.na(result[, j_4] & result[, j_4] != "NA"), 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result)))
result[, j_4] != "NA"
C <- ifelse(!is.na(result[, j_4]) & result[, j_4] != "NA", 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result)))
C
P_I <-  L_I_M * tanh(gA * E) * (1 - M * L_I_W) * C
P_R <-  L_R_M * tanh(gA * E) * (1 - M * L_R_W) * C
P_
P_R
E
P <- L_R_M * vaf * tanh(E) * (1 - M * L_R_W)
P
L_R_M
vaf
vaf <- ifelse(is.na(vaf), 0.5, vaf)
vaf
gA <- vaf * tanh(5 * vaf)
gA
vaf <- ifelse(is.na(vaf), 1.0, vaf)
gA <- vaf * tanh(5 * vaf)
E <- as.numeric(result[, match("Total_RNA", colnames(result))])
P <- L_R_M * vaf * tanh(E) * (1 - M * L_R_W)
P
pri_scores <- cbind(P_I, P_R, P)
colnames(pri_scores) <- c("P_I", "P_R", "P")
pri_scores <- cbind(P_I, P_R, P)
colnames(pri_scores) <- c("P_I", "P_R", "P")
return(cbind(result, pri_scores))
cbind(result, pri_scores)
rownames(pri_scores) <- NULL
CalculatePriorityScores <- function(result, useRNAvaf = FALSE){
if(useRNAvaf){
vaf <- result[, match("Tumor_RNA_Ratio", colnames(result))]
vaf <- sapply(vaf, function(x) as.numeric(strsplit(x, "/")[[1]][1]) / as.numeric(strsplit(x, "/")[[1]][2]))
} else {
vaf <- result[, match("Tumor_Depth", colnames(result)] / result[, match("Total_Depth", colnames(result)]
}
vaf <- ifelse(is.na(vaf), 1.0, vaf)
gA <- vaf * tanh(5 * vaf)
E <- as.numeric(result[, match("Total_RNA", colnames(result))])
j1 <- match("Evaluated_Mutant_Peptide", colnames(result))
j2 <- match("Evaluated_Wt_Peptide", colnames(result))
if(!is.na(j2)) {
M <- sapply(1:nrow(result),
function(i){
m <- strsplit(result[i, j1], "")[[1]]
w <- strsplit(result[i, j2], "")[[1]]
if(length(w) - length(m) < 0){
M <- 2^-length(m)
} else {
M <- 2^-min(sapply(seq(1, length(w) - length(m) + 1, 1),
function(point) length(m) - length(which(m == w[point:(point + length(m) - 1)]))))
}
return(M)
})
} else {
M <- 0
}
L_I_M <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Mut_IC50", colnames(result))]) - 500)))
L_R_M <- 1 / (1 + exp(5 * (as.numeric(result[, match("Mut_Rank", colnames(result))]) - 2)))
j_3 <- match("Wt_IC50", colnames(result))
if(!is.na(j_3)){
L_I_W <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Wt_IC50", colnames(result))]) - 500)))
L_R_W <- 1 / (1 + exp(5 * (as.numeric(result[, match("Wt_Rank", colnames(result))]) - 2)))
} else {
L_I_W <- 0
L_R_W <- 0
}
j_4 <- match("MutRatio", colnames(result))
C <- ifelse(!is.na(result[, j_4]) & result[, j_4] != "NA", 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result)))
P_I <-  L_I_M * tanh(gA * E) * (1 - M * L_I_W) * C
P_R <-  L_R_M * tanh(gA * E) * (1 - M * L_R_W) * C
P <- L_R_M * vaf * tanh(E) * (1 - M * L_R_W)
pri_scores <- cbind(P_I, P_R, P)
colnames(pri_scores) <- c("P_I", "P_R", "P")
rownames(pri_scores) <- NULL
return(cbind(result, pri_scores))
}
CalculatePriorityScores <- function(result, useRNAvaf = FALSE){
vaf <- result[, match("Tumor_RNA_Ratio", colnames(result))]
vaf <- sapply(vaf, function(x) as.numeric(strsplit(x, "/")[[1]][1]) / as.numeric(strsplit(x, "/")[[1]][2]))
} else {
}
vaf <- ifelse(is.na(vaf), 1.0, vaf)
if(useRNAvaf){
vaf <- result[, match("Tumor_RNA_Ratio", colnames(result))]
vaf <- sapply(vaf, function(x) as.numeric(strsplit(x, "/")[[1]][1]) / as.numeric(strsplit(x, "/")[[1]][2]))
} else {
vaf <- result[, match("Tumor_Depth", colnames(result)] / result[, match("Total_Depth", colnames(result)]
}
if(useRNAvaf){
vaf <- result[, match("Tumor_RNA_Ratio", colnames(result))]
vaf <- sapply(vaf, function(x) as.numeric(strsplit(x, "/")[[1]][1]) / as.numeric(strsplit(x, "/")[[1]][2]))
} else {
vaf <- result[, match("Tumor_Depth", colnames(result)] / result[, match("Total_Depth", colnames(result)]
}
CalculatePriorityScores <- function(result, useRNAvaf = FALSE){
if(useRNAvaf){
vaf <- result[, match("Tumor_RNA_Ratio", colnames(result))]
vaf <- sapply(vaf, function(x) as.numeric(strsplit(x, "/")[[1]][1]) / as.numeric(strsplit(x, "/")[[1]][2]))
} else {
vaf <- result[, match("Tumor_Depth", colnames(result))] / result[, match("Total_Depth", colnames(result))]
}
vaf <- ifelse(is.na(vaf), 1.0, vaf)
gA <- vaf * tanh(5 * vaf)
E <- as.numeric(result[, match("Total_RNA", colnames(result))])
j1 <- match("Evaluated_Mutant_Peptide", colnames(result))
j2 <- match("Evaluated_Wt_Peptide", colnames(result))
if(!is.na(j2)) {
M <- sapply(1:nrow(result),
function(i){
m <- strsplit(result[i, j1], "")[[1]]
w <- strsplit(result[i, j2], "")[[1]]
if(length(w) - length(m) < 0){
M <- 2^-length(m)
} else {
M <- 2^-min(sapply(seq(1, length(w) - length(m) + 1, 1),
function(point) length(m) - length(which(m == w[point:(point + length(m) - 1)]))))
}
return(M)
})
} else {
M <- 0
}
L_I_M <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Mut_IC50", colnames(result))]) - 500)))
L_R_M <- 1 / (1 + exp(5 * (as.numeric(result[, match("Mut_Rank", colnames(result))]) - 2)))
j_3 <- match("Wt_IC50", colnames(result))
if(!is.na(j_3)){
L_I_W <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Wt_IC50", colnames(result))]) - 500)))
L_R_W <- 1 / (1 + exp(5 * (as.numeric(result[, match("Wt_Rank", colnames(result))]) - 2)))
} else {
L_I_W <- 0
L_R_W <- 0
}
j_4 <- match("MutRatio", colnames(result))
C <- ifelse(!is.na(result[, j_4]) & result[, j_4] != "NA", 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result)))
P_I <-  L_I_M * tanh(gA * E) * (1 - M * L_I_W) * C
P_R <-  L_R_M * tanh(gA * E) * (1 - M * L_R_W) * C
P <- L_R_M * vaf * tanh(E) * (1 - M * L_R_W)
pri_scores <- cbind(P_I, P_R, P)
colnames(pri_scores) <- c("P_I", "P_R", "P")
rownames(pri_scores) <- NULL
return(cbind(result, pri_scores))
}
Result_HLA1_SNV_1 <- CalculatePriorityScores(result = Result_HLA1_SNV[[1]], useRNAvaf = FALSE)
result = Result_HLA1_SNV[[1]]
if(useRNAvaf){
vaf <- result[, match("Tumor_RNA_Ratio", colnames(result))]
vaf <- sapply(vaf, function(x) as.numeric(strsplit(x, "/")[[1]][1]) / as.numeric(strsplit(x, "/")[[1]][2]))
} else {
vaf <- result[, match("Tumor_Depth", colnames(result))] / result[, match("Total_Depth", colnames(result))]
}
vaf <- ifelse(is.na(vaf), 1.0, vaf)
gA <- vaf * tanh(5 * vaf)
E <- as.numeric(result[, match("Total_RNA", colnames(result))])
j1 <- match("Evaluated_Mutant_Peptide", colnames(result))
j2 <- match("Evaluated_Wt_Peptide", colnames(result))
if(!is.na(j2)) {
M <- sapply(1:nrow(result),
function(i){
m <- strsplit(result[i, j1], "")[[1]]
w <- strsplit(result[i, j2], "")[[1]]
if(length(w) - length(m) < 0){
M <- 2^-length(m)
} else {
M <- 2^-min(sapply(seq(1, length(w) - length(m) + 1, 1),
function(point) length(m) - length(which(m == w[point:(point + length(m) - 1)]))))
}
return(M)
})
} else {
M <- 0
}
L_I_M <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Mut_IC50", colnames(result))]) - 500)))
L_R_M <- 1 / (1 + exp(5 * (as.numeric(result[, match("Mut_Rank", colnames(result))]) - 2)))
j_3 <- match("Wt_IC50", colnames(result))
if(!is.na(j_3)){
L_I_W <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Wt_IC50", colnames(result))]) - 500)))
L_R_W <- 1 / (1 + exp(5 * (as.numeric(result[, match("Wt_Rank", colnames(result))]) - 2)))
} else {
L_I_W <- 0
L_R_W <- 0
}
j_4 <- match("MutRatio", colnames(result))
C <- ifelse(!is.na(result[, j_4]) & result[, j_4] != "NA", 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result)))
P_I <-  L_I_M * tanh(gA * E) * (1 - M * L_I_W) * C
P_R <-  L_R_M * tanh(gA * E) * (1 - M * L_R_W) * C
P <- L_R_M * vaf * tanh(E) * (1 - M * L_R_W)
pri_scores <- cbind(P_I, P_R, P)
colnames(pri_scores) <- c("P_I", "P_R", "P")
rownames(pri_scores) <- NULL
return(cbind(result, pri_scores))
if(useRNAvaf){
vaf <- result[, match("Tumor_RNA_Ratio", colnames(result))]
vaf <- sapply(vaf, function(x) as.numeric(strsplit(x, "/")[[1]][1]) / as.numeric(strsplit(x, "/")[[1]][2]))
} else {
vaf <- result[, match("Tumor_Depth", colnames(result))] / result[, match("Total_Depth", colnames(result))]
}
useRNAvaf
vaf <- as.numeric(result[, match("Tumor_Depth", colnames(result))]) / as.numeric(result[, match("Total_Depth", colnames(result))])
vaf
CalculatePriorityScores <- function(result, useRNAvaf = FALSE){
if(useRNAvaf){
vaf <- result[, match("Tumor_RNA_Ratio", colnames(result))]
vaf <- sapply(vaf, function(x) as.numeric(strsplit(x, "/")[[1]][1]) / as.numeric(strsplit(x, "/")[[1]][2]))
} else {
vaf <- as.numeric(result[, match("Tumor_Depth", colnames(result))]) / as.numeric(result[, match("Total_Depth", colnames(result))])
}
vaf <- ifelse(is.na(vaf), 1.0, vaf)
gA <- vaf * tanh(5 * vaf)
E <- as.numeric(result[, match("Total_RNA", colnames(result))])
j1 <- match("Evaluated_Mutant_Peptide", colnames(result))
j2 <- match("Evaluated_Wt_Peptide", colnames(result))
if(!is.na(j2)) {
M <- sapply(1:nrow(result),
function(i){
m <- strsplit(result[i, j1], "")[[1]]
w <- strsplit(result[i, j2], "")[[1]]
if(length(w) - length(m) < 0){
M <- 2^-length(m)
} else {
M <- 2^-min(sapply(seq(1, length(w) - length(m) + 1, 1),
function(point) length(m) - length(which(m == w[point:(point + length(m) - 1)]))))
}
return(M)
})
} else {
M <- 0
}
L_I_M <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Mut_IC50", colnames(result))]) - 500)))
L_R_M <- 1 / (1 + exp(5 * (as.numeric(result[, match("Mut_Rank", colnames(result))]) - 2)))
j_3 <- match("Wt_IC50", colnames(result))
if(!is.na(j_3)){
L_I_W <- 1 / (1 + exp(0.015 * (as.numeric(result[, match("Wt_IC50", colnames(result))]) - 500)))
L_R_W <- 1 / (1 + exp(5 * (as.numeric(result[, match("Wt_Rank", colnames(result))]) - 2)))
} else {
L_I_W <- 0
L_R_W <- 0
}
j_4 <- match("MutRatio", colnames(result))
C <- ifelse(!is.na(result[, j_4]) & result[, j_4] != "NA", 1 / (1 - exp(-30 * (as.numeric(result[, j_4]) - 0.8))), rep(1, nrow(result)))
P_I <-  L_I_M * tanh(gA * E) * (1 - M * L_I_W) * C
P_R <-  L_R_M * tanh(gA * E) * (1 - M * L_R_W) * C
P <- L_R_M * vaf * tanh(E) * (1 - M * L_R_W)
pri_scores <- cbind(P_I, P_R, P)
colnames(pri_scores) <- c("P_I", "P_R", "P")
rownames(pri_scores) <- NULL
return(cbind(result, pri_scores))
}
Result_HLA1_SNV_1 <- CalculatePriorityScores(result = Result_HLA1_SNV[[1]], useRNAvaf = FALSE)
Result_HLA1_SNV_2 <- CalculatePriorityScores(result = Result_HLA1_SNV[[2]], useRNAvaf = FALSE)
Result_HLA1_SNV_1[1,]
Result_HLA1_SNV_1[2,]
Result_HLA2_SNV <- MainSNVClass2(input_annovar_format_file = "data/sample_vcf.annovar.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample_vcf.snps.vcf",
multiple_variants = TRUE)
Result_HLA1_SNV_vep <- MainSNVClass1(input_vep_format_file = "data/sample_vcf.vep.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
multiple_variants = FALSE)
head(CalculatePriorityScores(result = Result_HLA1_SNV_vep, useRNAvaf = FALSE)
)
Result_HLA1_vep_SNV <- CalculatePriorityScores(result = Result_HLA1_SNV_vep, useRNAvaf = FALSE)
dim(Result_HLA1_vep_SNV)
plot(sort(as.numeric(Result_HLA1_vep_SNV[,33])))
order(rev(as.numeric(Result_HLA1_vep_SNV[,33])))[1:10]
result[order(rev(as.numeric(Result_HLA1_vep_SNV[,33])))[1:10],]
result[order(as.numeric(Result_HLA1_vep_SNV[,33]))[1:10],]
Result_HLA1_vep_SNV[order(rev(as.numeric(Result_HLA1_vep_SNV[,33])))[1:10],]
Result_HLA1_vep_SNV[order(as.numeric(Result_HLA1_vep_SNV[,33]))[1:10],]
sort(as.numeric(Result_HLA1_vep_SNV[,33]))[1:10]
rev(sort(as.numeric(Result_HLA1_vep_SNV[,33])))[1:10]
rev(order(as.numeric(Result_HLA1_vep_SNV[,33])))[1:10]
Result_HLA1_vep_SNV[rev(order(as.numeric(Result_HLA1_vep_SNV[,33])))[1:10],
]
Result_HLA1_INDEL <- MainINDELClass1(input_annovar_format_file = "data/sample_vcf.annovar.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample_vcf.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
Result_HLA1_INDEL_vep <- MainSNVClass1(input_vep_format_file = "data/sample_vcf.vep.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample_vcf.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
Result_HLA2_INDEL <- MainINDELClass2(input_annovar_format_file = "data/sample_vcf.annovar.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample_vcf.snps.vcf",
multiple_variants = TRUE)
Result_HLA1_SV <- MainSVFUSIONClass1(input_file = "data/sample_sv_bnd.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8)
Result_HLA2_SV <- MainSVFUSIONClass2(input_file = "data/sample_sv_bnd.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8)
Result_HLA1_Seq <- MainSeqFragmentClass1(input_sequence = "atggcagaagatgatccatatttgggaaggcctgaaaaaatgtttcatttggatccttctttgactcatacaatatttaatc",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
hmdir = getwd(),
job_id = "NO_job_id",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
reference_nm_id = c("NM_003998", "NM_001165412"))
Result_HLA2_Seq <- MainSeqFragmentClass2(input_sequence = "atggcagaagatgatccatatttgggaaggcctgaacaaatgtttcatttgatccttctttgactcatacaatatttaatc",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
hmdir = getwd(),
job_id = "NO_job_id",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
reference_gene_symbol = c("NFKB1", "BCL3"))
head(Result_HLA1_SNV_vep)
min
Result_HLA1_vep_SNV <- CalculatePriorityScores(result = Result_HLA1_SNV_vep, useRNAvaf = FALSE)
head(Result_HLA1_vep_SNV)
CalculatePriorityScores(result = Result_HLA2_SNV, useRNAvaf = FALSE)
Result_HLA2_SNV <- CalculatePriorityScores(result = Result_HLA2_SNV, useRNAvaf = FALSE)
Result_HLA2_SNV
Result_HLA1_SNV
Result_HLA1_SNV_1
CalculatePriorityScores(result = Result_HLA1_INDEL, useRNAvaf = FALSE)
result <- Result_HLA1_INDEL
if(useRNAvaf){
vaf <- result[, match("Tumor_RNA_Ratio", colnames(result))]
vaf <- sapply(vaf, function(x) as.numeric(strsplit(x, "/")[[1]][1]) / as.numeric(strsplit(x, "/")[[1]][2]))
} else {
vaf <- as.numeric(result[, match("Tumor_Depth", colnames(result))]) / as.numeric(result[, match("Total_Depth", colnames(result))])
}
vaf <- ifelse(is.na(vaf), 1.0, vaf)
vaf
gA <- vaf * tanh(5 * vaf)
E <- as.numeric(result[, match("Total_RNA", colnames(result))])
j1 <- match("Evaluated_Mutant_Peptide", colnames(result))
colnames(result)
Result_HLA1_INDEL_1 <- CalculatePriorityScores(result = Result_HLA1_INDEL[[1]], useRNAvaf = FALSE)
Result_HLA1_INDEL_1
Result_HLA1_INDEL_2 <- CalculatePriorityScores(result = Result_HLA1_INDEL[[2]], useRNAvaf = FALSE)
head(Result_HLA1_INDEL_vep)
head(Result_HLA1_INDEL_vep[[1]])
Result_HLA2_INDEL <- CalculatePriorityScores(result = Result_HLA2_INDEL, useRNAvaf = FALSE)
Result_HLA2_INDEL
Result_HLA1_SV <- CalculatePriorityScores(result = Result_HLA1_SV, useRNAvaf = FALSE)
Result_HLA1_SV
head(Result_HLA1_SV)
Result_HLA2_SV <- CalculatePriorityScores(result = Result_HLA2_SV, useRNAvaf = FALSE)
Result_HLA1_SNV_vep <- MainSNVClass1(input_vep_format_file = "data/sample_vcf.vep.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
multiple_variants = FALSE)
Result_HLA1_vep_SNV <- CalculatePriorityScores(result = Result_HLA1_SNV_vep, useRNAvaf = FALSE)
head(Result_HLA1_vep_SNV)
for(r_code in list.files("./../R/")) source(paste("./../R/", r_code, sep = ""))
Result_HLA1_SNV_vep <- MainSNVClass1(input_vep_format_file = "data/sample_vcf.vep.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
multiple_variants = FALSE)
Result_HLA1_vep_SNV <- CalculatePriorityScores(result = Result_HLA1_SNV_vep, useRNAvaf = FALSE)
Result_HLA1_vep_SNV
head(Result_HLA1_Seq)
colnames(Result_HLA1_Seq)
colnames(Result_HLA2_Seq)
