if(is.na(input_sequence[1]) & length(s_variants_from_input_nmid) == 0){
print(paste("NM_ID NOT Macth, Skip:", nm_id))
return(NULL)
}
#
names(input_sequence) <- rep("", length(input_sequence))
if(length(s_variants_from_input_nmid) != 0){
if(is.na(input_sequence[1])) input_sequence <- NULL
for(v in s_variants_from_input_nmid){
#Whether Last or Not
nm_sep <- as.character(list_nm[v,])
nm_id <- nm_sep[2]
#Skip Such As "ch5_hap"
if(nchar(nm_sep[3]) > 5) next
chr <- nm_sep[3]
strand <- nm_sep[4]
g_name <- nm_sep[1]
#Get Translation Start/End, Exon Start/End
trans_start <- as.numeric(nm_sep[7])
trans_end <- as.numeric(nm_sep[8])
exon_start <- as.numeric(strsplit(nm_sep[10], ",")[[1]])
exon_end <- as.numeric(strsplit(nm_sep[11], ",")[[1]])
#Obtain DNA sequence of Transcriptome
dna <- list_fl_dna[match(nm_id, list_fl_NMID)]
#Check DNA
if(check_dna_validity(dna, nm_id, exon_end, exon_start, ambiguous_between_exon, final_s_variants, Pass)) next
#Get Relative Translation-Start Position (0-start to 1-start)
ts_point <- get_relative_translation_start_position(strand, exon_end, trans_start, exon_start, trans_end)
#Check Start Codon
d <- check_start_codon(dna, ts_point, ambiguous_codon, nm_id)
if(d < -998 | is.null(d)) next
#Get Relative Translation-End Position
te_point <- get_relative_translation_end_position(strand, exon_end, trans_start, exon_start, trans_end)
#Check Stop Codon
e <- check_stop_codon(dna, te_point, ts_point, ambiguous_codon, amino, nm_id)
if(e < -998 | is.null(e)) next
#Check Peptide Length
stop_loop<-FALSE
dna_trans <- substr(dna, ts_point, nchar(dna))
count_dna <- 0
dna_trans <- substr(tolower(dna_trans), reading_frame, nchar(dna_trans))
while(nchar(dna_trans) >= 3){
if(amino[match(substr(dna_trans, 1, 3), codon)] == "X" & count_dna >= te_point - ts_point - 3) break
dna_trans <- substr(dna_trans, 4, nchar(dna_trans))
count_dna <- count_dna + 3
}
dna_trans <- substr(dna, ts_point, min(ts_point + count_dna + 3, nchar(dna)))
input_sequence <- c(input_sequence, dna_trans)
names(input_sequence)[length(input_sequence)] <- paste(g_name, nm_id, chr, sep = ";")
}
}
if(is.null(input_sequence[1])) return(NULL)
if(is.na(input_sequence[1])) return(NULL)
fasta<-NULL
refFasta<-NULL
random<-0
for(input_sequence_1 in input_sequence){
peptide_mutated <- NULL
input_sequence_2 <- substr(tolower(input_sequence_1), reading_frame, nchar(input_sequence_1))
while(nchar(input_sequence_2) >= 3){
peptide_mutated <- c(peptide_mutated, amino[match(substr(input_sequence_2, 1, 3), codon)])
input_sequence_2 <- substr(input_sequence_2, 4, nchar(input_sequence_2))
}
number_of_peptide <- length(peptide_mutated)
peptide_mutated_sep <- strsplit(paste(peptide_mutated, collapse = ""), "X")[[1]]
number_of_stop <- length(peptide_mutated_sep) - 1
for(peptide_mutated in peptide_mutated_sep){
peptide <- peptide_mutated
peptide_mutated <- strsplit(peptide_mutated, "")[[1]]
# if(length(peptide_mutated) >= min_peptide_length) {
#   pep_end_pos <- length(peptide_mutated) - min_peptide_length
#   if(pep_end_pos < 1) {
#     print("Mutated Peptide is too short, Skip")
#     next
#   }
#   flg_vec <- rep(FALSE, length(peptide_mutated))
#   ref_pep <- paste(peptide_normal_merged, collapse = "")
#   for(i in 1:(pep_end_pos + 1)){
#     flg <- length(grep(paste(peptide_mutated[i:(i + min_peptide_length - 1)], collapse = ""), ref_pep)) == 0
#     if(flg) flg_vec[(ifelse(i - (max_peptide_length - min_peptide_length) < 1, 1, i - (max_peptide_length - min_peptide_length))):
#                       (ifelse(i + max_peptide_length - 1 > length(peptide_mutated), length(peptide_mutated), i + max_peptide_length - 1))] <- TRUE
#   }
#   peptide_mutated <- paste(ifelse(flg_vec, peptide_mutated, "-"), collapse = "")
# } else {
#   peptide_mutated <- paste(peptide_mutated, collapse = "")
# }
# for(peptide in strsplit(peptide_mutated, "-")[[1]]){
#Save Peptide
#if(nchar(peptide) < min_peptide_length) next
seq_num <- match(input_sequence_1, input_sequence)
g_name <- strsplit(names(input_sequence)[seq_num], ";")[[1]][1]
g_name <- ifelse(is.na(g_name) | g_name == "", substr(input_sequence_1, 1, 10), g_name)
nm_id <- strsplit(names(input_sequence)[seq_num], ";")[[1]][2]
nm_id <- ifelse(is.na(nm_id), "", nm_id)
group_id <- group_ids[match(input_sequence_1, names(group_ids))]
if(is.na(group_id)) group_id <- group_ids[match(nm_id, names(group_ids))]
refFasta<-rbind(refFasta,
c(paste(random, g_name, sep="_"),
0,
nm_id,
reading_frame,
seq_num,
ifelse(is.null(chrs), "", chrs),
ifelse(is.null(nm_ids), "", nm_ids),
ifelse(is.null(gene_ids), "", gene_ids),
ifelse(is.null(exon_starts), "", exon_starts),
ifelse(is.null(exon_ends), "", exon_ends),
group_id,
number_of_peptide,
number_of_stop,
ifelse(is.null(paste(peptide_normal_merged, collapse="")), "", paste(peptide_normal_merged, collapse="")),
paste(peptide_mutated, collapse = ""),
ifelse(is.null(dna_trans_normal_merged), "", dna_trans_normal_merged),
input_sequence_1))
fasta <- c(fasta, sub("_","", paste(">", random, gsub("\"","", g_name), sep="_")))
fasta <- c(fasta, paste(peptide, collapse=""))
random <- random + 1
print("Peptide Successfully Generated!!")
}
}
write.table(fasta,
paste(export_dir, "/", job_id, ".", "peptide", ".", "fasta", sep=""),
row.names=FALSE, col.names=FALSE, quote=FALSE, sep="\t")
write.table(cbind(refFasta, matrix(nrow = nrow(refFasta), ncol = 27 - ncol(refFasta) - 1, NA)),
paste(export_dir, "/", job_id, ".", "peptide", ".", "txt", sep=""),
row.names=seq(1:nrow(refFasta)), col.names=FALSE, quote=FALSE, sep="\t")
}
GenerateMutatedFragments(input_sequence = input_sequence,
input_nm_id = NA,
group_ids = group_ids,
hmdir = hmdir,
job_id = job_id,
refflat_file = refflat_file,
refmrna_file = refmrna_file,
max_peptide_length = max(peptide_length),
min_peptide_length = min(peptide_length),
reading_frame = 1,
export_dir = export_dir,
reference_nm_id = reference_nm_id,
reference_gene_symbol = reference_gene_symbol,
IgnoreShortPeptides = IgnoreShortPeptides)
input_nm_id
input_sequence
input_nm_id = NA
GenerateMutatedFragments(input_sequence = input_sequence,
input_nm_id = NA,
group_ids = group_ids,
hmdir = hmdir,
job_id = job_id,
refflat_file = refflat_file,
refmrna_file = refmrna_file,
max_peptide_length = max(peptide_length),
min_peptide_length = min(peptide_length),
reading_frame = 1,
export_dir = export_dir,
reference_nm_id = reference_nm_id,
reference_gene_symbol = reference_gene_symbol,
IgnoreShortPeptides = IgnoreShortPeptides)
input_nm_id
group_ids
s_variants_from_input_nmid
#Check Output
coutput_peptide_prefix <- paste(export_dir, "/", job_id, sep="")
output_peptide_txt_file <- paste(export_dir, "/", job_id, ".peptide.txt", sep="")
if(!file.exists(output_peptide_txt_file)){
print("Could not Generate Mutation File for Calculating Neoantigens. Finish.")
return(NULL)
}
#NetMHCpan
if(is.na(netMHCpan_dir) | !file.exists(netMHCpan_dir)) {
print(paste("Did not find", netMHCpan_dir))
return(NULL)
}
if(!dir.exists(export_dir)) dir.create(export_dir, recursive = TRUE)
#Execute NetMHCpan
ExeNetMHCpanClass1(output_peptide_prefix = output_peptide_prefix,
"peptide",
hla_types,
netMHCpan_dir,
peptide_length,
export_dir,
input_file = "",
job_id)
output_peptide_prefix
#Check Output
output_peptide_prefix <- paste(export_dir, "/", job_id, sep="")
output_peptide_txt_file <- paste(export_dir, "/", job_id, ".peptide.txt", sep="")
if(!file.exists(output_peptide_txt_file)){
print("Could not Generate Mutation File for Calculating Neoantigens. Finish.")
return(NULL)
}
#NetMHCpan
if(is.na(netMHCpan_dir) | !file.exists(netMHCpan_dir)) {
print(paste("Did not find", netMHCpan_dir))
return(NULL)
}
if(!dir.exists(export_dir)) dir.create(export_dir, recursive = TRUE)
#Execute NetMHCpan
ExeNetMHCpanClass1(output_peptide_prefix = output_peptide_prefix,
"peptide",
hla_types,
netMHCpan_dir,
peptide_length,
export_dir,
input_file = "",
job_id)
input_dir = export_dir
file_prefix = job_id
annotation_file = output_peptide_txt_file
print("Merging Results...")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS1", files), grep(file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
info
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs", "Exon_Starts",
"Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
View(info)
rownames(info)<-NULL
colnames(info)<-cinfo
paste(info[,3], info[,12], sep="_")
info[,12]<-paste(info[,3], info[,12], sep="_")
info[, match("Tumor_RNA_based_on_DNA",colnames(info))]<-
as.numeric(info[,match("Total_RNA",colnames(info))]) *
as.numeric(info[,match("Tumor_Depth",colnames(info))]) /
as.numeric(info[,match("Total_Depth",colnames(info))])
match("Tumor_RNA_based_on_DNA",colnames(info))
#Remove RNAseq Info
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
info[,c(16)]
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-intersect(grep("Pos ", test1), grep("Icore ", test1)) + 2
ee1<-intersect(grep("Protein", test1), grep("binders", test1)) - 2
num1<-sapply(gsub("[ ]+", "\t", test1[ss1]), function(x) strsplit(x, "\t")[[1]][11])
#if(length(grep("No peptides derived", test1[1:45])) > 0) next
if(length(grep("cannot be found in hla_pseudo list", test1)) > 0) next
if(length(grep("Could not find allele", test1)) > 0) next
for(h1 in 1:length(num1)){
print(paste((h1 / length(num1)) * 100, "perc. fin"))
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(3, 2, 12, 11, 4, 14, 15) - 1])
d1<-t(d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(3, 2, 12, 11, 4, 14, 15) - 1]))
d1<-d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),]
if(is.null(nrow(d1))) d1<-t(d1)
}
if(nrow(d1)==0 | ncol(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
rownames(d1) <- NULL
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50",
"Mut_Rank", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs",
"Exon_Starts", "Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
full_peptide
View(full_peptide)
write.table(full_peptide, paste(dir, "/", file_prefix, ".HLACLASS1.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
#Merge Results
result <- MergeFragmentsClass1(input_dir = export_dir,
file_prefix = job_id,
annotation_file = output_peptide_txt_file)
MergeFragmentsClass1<-function(hmdir = getwd(),
annotation_file,
input_dir,
file_prefix){
print("Merging Results...")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS1", files), grep(file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs", "Exon_Starts",
"Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
rownames(info)<-NULL
colnames(info)<-cinfo
info[,12]<-paste(info[,3], info[,12], sep="_")
#Remove RNAseq Info
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-intersect(grep("Pos ", test1), grep("Icore ", test1)) + 2
ee1<-intersect(grep("Protein", test1), grep("binders", test1)) - 2
num1<-sapply(gsub("[ ]+", "\t", test1[ss1]), function(x) strsplit(x, "\t")[[1]][11])
#if(length(grep("No peptides derived", test1[1:45])) > 0) next
if(length(grep("cannot be found in hla_pseudo list", test1)) > 0) next
if(length(grep("Could not find allele", test1)) > 0) next
for(h1 in 1:length(num1)){
print(paste((h1 / length(num1)) * 100, "perc. fin"))
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(3, 2, 12, 11, 4, 14, 15) - 1])
d1<-t(d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(3, 2, 12, 11, 4, 14, 15) - 1]))
d1<-d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),]
if(is.null(nrow(d1))) d1<-t(d1)
}
if(nrow(d1)==0 | ncol(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
rownames(d1) <- NULL
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50",
"Mut_Rank", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs",
"Exon_Starts", "Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".HLACLASS1.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
return(full_peptide)
}
#Merge Results
result <- MergeFragmentsClass1(input_dir = export_dir,
file_prefix = job_id,
annotation_file = output_peptide_txt_file)
Result_HLA1_Seq <- return
Result_HLA1_Seq <- result
print(head(Result_HLA1_Seq))
print(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
print(Export_Summary_Entire_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan"
#Execute NetMHCpan
ExeNetMHCpanClass2(output_peptide_prefix = output_peptide_prefix,
"peptide",
hla_types,
netMHCIIpan_dir,
peptide_length,
export_dir,
input_file = "",
job_id)
netMHCIIpan_dir
output_peptide_prefix
#Execute NetMHCpan
ExeNetMHCpanClass2(output_peptide_prefix = output_peptide_prefix,
"peptide",
hla_types,
netMHCIIpan_dir,
peptide_length,
export_dir,
input_file = "",
job_id)
netMHCIIpan_dir
peptide_length
peptide_length<-15
ls(all=T)
character(0)
rm(list=ls(all=TRUE))
for(rc in list.files("/Users/takaorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takaorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
Result_HLA1_Seq <- MainSeqFragmentClass1(input_sequence = "atggcagaagatgatccatatttgggaaggcctgaaaaaatgtttcatttggatccttctttgactcatacaatatttaatc",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
hmdir = getwd(),
job_id = "NO_job_id",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
reference_nm_id = c("NM_003998", "NM_001165412"))
print(head(Result_HLA1_Seq))
print(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
Result_HLA2_Seq <- MainSeqFragmentClass2(input_sequence = "atggcagaagatgatccatatttgggaaggcctgaacaaatgtttcatttgatccttctttgactcatacaatatttaatc",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
hmdir = getwd(),
job_id = "NO_job_id",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan",
reference_gene_symbol = c("NFKB1", "BCL3")
)
print(head(Result_HLA2_Seq))
print(Export_Summary_Fragments(Result_HLA2_Seq, Mut_IC50_th = 500))
print(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
print(Export_Summary_Fragments(Result_HLA2_Seq, Mut_IC50_th = 500))
print(head(Result_HLA2_Seq))
View(Result_HLA2_Seq)
print(Export_Summary_Fragments(Result_HLA2_Seq, Mut_IC50_th = 500))
print(head(Result_HLA1_Seq))
print(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
#install.packages('devtools');
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
setwd("lib")
#install.packages('devtools');
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
setwd("~/Github/Neoantimon/lib")
#for(rc in list.files("/Users/takanorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takanorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
getwd()
#install.packages('devtools');
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
#setwd("~/Github/Neoantimon/lib")
#for(rc in list.files("/Users/takanorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takanorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
getwd()
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "./../lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
print(head(Result_HLA1_SNV[[1]]))
print(Export_Summary_SNV(Input = Result_HLA1_SNV[[1]], Mut_IC50_th = 500, Wt_IC50_th = 500))
Result_HLA2_SNV <- MainSNVClass2(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "./../lib/netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE)
print(head(Result_HLA2_SNV))
#install.packages('devtools');
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
setwd("~/Github/Neoantimon/vignettes/")
#for(rc in list.files("/Users/takanorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takanorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
