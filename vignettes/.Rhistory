GenerateMutatedFragments(input_sequence = input_sequence,
input_nm_id = NA,
group_ids = group_ids,
hmdir = hmdir,
job_id = job_id,
refflat_file = refflat_file,
refmrna_file = refmrna_file,
max_peptide_length = max(peptide_length),
min_peptide_length = min(peptide_length),
reading_frame = 1,
export_dir = export_dir,
reference_nm_id = reference_nm_id,
reference_gene_symbol = reference_gene_symbol,
IgnoreShortPeptides = IgnoreShortPeptides)
input_nm_id
group_ids
s_variants_from_input_nmid
#Check Output
coutput_peptide_prefix <- paste(export_dir, "/", job_id, sep="")
output_peptide_txt_file <- paste(export_dir, "/", job_id, ".peptide.txt", sep="")
if(!file.exists(output_peptide_txt_file)){
print("Could not Generate Mutation File for Calculating Neoantigens. Finish.")
return(NULL)
}
#NetMHCpan
if(is.na(netMHCpan_dir) | !file.exists(netMHCpan_dir)) {
print(paste("Did not find", netMHCpan_dir))
return(NULL)
}
if(!dir.exists(export_dir)) dir.create(export_dir, recursive = TRUE)
#Execute NetMHCpan
ExeNetMHCpanClass1(output_peptide_prefix = output_peptide_prefix,
"peptide",
hla_types,
netMHCpan_dir,
peptide_length,
export_dir,
input_file = "",
job_id)
output_peptide_prefix
#Check Output
output_peptide_prefix <- paste(export_dir, "/", job_id, sep="")
output_peptide_txt_file <- paste(export_dir, "/", job_id, ".peptide.txt", sep="")
if(!file.exists(output_peptide_txt_file)){
print("Could not Generate Mutation File for Calculating Neoantigens. Finish.")
return(NULL)
}
#NetMHCpan
if(is.na(netMHCpan_dir) | !file.exists(netMHCpan_dir)) {
print(paste("Did not find", netMHCpan_dir))
return(NULL)
}
if(!dir.exists(export_dir)) dir.create(export_dir, recursive = TRUE)
#Execute NetMHCpan
ExeNetMHCpanClass1(output_peptide_prefix = output_peptide_prefix,
"peptide",
hla_types,
netMHCpan_dir,
peptide_length,
export_dir,
input_file = "",
job_id)
input_dir = export_dir
file_prefix = job_id
annotation_file = output_peptide_txt_file
print("Merging Results...")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS1", files), grep(file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
info
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs", "Exon_Starts",
"Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
View(info)
rownames(info)<-NULL
colnames(info)<-cinfo
paste(info[,3], info[,12], sep="_")
info[,12]<-paste(info[,3], info[,12], sep="_")
info[, match("Tumor_RNA_based_on_DNA",colnames(info))]<-
as.numeric(info[,match("Total_RNA",colnames(info))]) *
as.numeric(info[,match("Tumor_Depth",colnames(info))]) /
as.numeric(info[,match("Total_Depth",colnames(info))])
match("Tumor_RNA_based_on_DNA",colnames(info))
#Remove RNAseq Info
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
info[,c(16)]
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-intersect(grep("Pos ", test1), grep("Icore ", test1)) + 2
ee1<-intersect(grep("Protein", test1), grep("binders", test1)) - 2
num1<-sapply(gsub("[ ]+", "\t", test1[ss1]), function(x) strsplit(x, "\t")[[1]][11])
#if(length(grep("No peptides derived", test1[1:45])) > 0) next
if(length(grep("cannot be found in hla_pseudo list", test1)) > 0) next
if(length(grep("Could not find allele", test1)) > 0) next
for(h1 in 1:length(num1)){
print(paste((h1 / length(num1)) * 100, "perc. fin"))
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(3, 2, 12, 11, 4, 14, 15) - 1])
d1<-t(d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(3, 2, 12, 11, 4, 14, 15) - 1]))
d1<-d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),]
if(is.null(nrow(d1))) d1<-t(d1)
}
if(nrow(d1)==0 | ncol(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
rownames(d1) <- NULL
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50",
"Mut_Rank", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs",
"Exon_Starts", "Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
full_peptide
View(full_peptide)
write.table(full_peptide, paste(dir, "/", file_prefix, ".HLACLASS1.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
#Merge Results
result <- MergeFragmentsClass1(input_dir = export_dir,
file_prefix = job_id,
annotation_file = output_peptide_txt_file)
MergeFragmentsClass1<-function(hmdir = getwd(),
annotation_file,
input_dir,
file_prefix){
print("Merging Results...")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS1", files), grep(file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs", "Exon_Starts",
"Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
rownames(info)<-NULL
colnames(info)<-cinfo
info[,12]<-paste(info[,3], info[,12], sep="_")
#Remove RNAseq Info
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1 <- read_1col_by_fread_or_scan(paste(dir, f, sep="/"))
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-intersect(grep("Pos ", test1), grep("Icore ", test1)) + 2
ee1<-intersect(grep("Protein", test1), grep("binders", test1)) - 2
num1<-sapply(gsub("[ ]+", "\t", test1[ss1]), function(x) strsplit(x, "\t")[[1]][11])
#if(length(grep("No peptides derived", test1[1:45])) > 0) next
if(length(grep("cannot be found in hla_pseudo list", test1)) > 0) next
if(length(grep("Could not find allele", test1)) > 0) next
for(h1 in 1:length(num1)){
print(paste((h1 / length(num1)) * 100, "perc. fin"))
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(3, 2, 12, 11, 4, 14, 15) - 1])
d1<-t(d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(3, 2, 12, 11, 4, 14, 15) - 1]))
d1<-d1[sapply(d1[, 5], function(x) length(grep(x, info[match(num1[h1], info[, 2]), 15]))==0),]
if(is.null(nrow(d1))) d1<-t(d1)
}
if(nrow(d1)==0 | ncol(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
rownames(d1) <- NULL
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50",
"Mut_Rank", "Chr", "NM_ID", "ReadingFrame", "SequenceNumber", "Chrs", "NM_IDs", "GeneIDs",
"Exon_Starts", "Exon_Ends", "GroupID", "NumOfPeptides", "NumOfStops", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[, 3], 1, 10), substr(info[, 2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".HLACLASS1.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
return(full_peptide)
}
#Merge Results
result <- MergeFragmentsClass1(input_dir = export_dir,
file_prefix = job_id,
annotation_file = output_peptide_txt_file)
Result_HLA1_Seq <- return
Result_HLA1_Seq <- result
print(head(Result_HLA1_Seq))
print(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
print(Export_Summary_Entire_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan"
#Execute NetMHCpan
ExeNetMHCpanClass2(output_peptide_prefix = output_peptide_prefix,
"peptide",
hla_types,
netMHCIIpan_dir,
peptide_length,
export_dir,
input_file = "",
job_id)
netMHCIIpan_dir
output_peptide_prefix
#Execute NetMHCpan
ExeNetMHCpanClass2(output_peptide_prefix = output_peptide_prefix,
"peptide",
hla_types,
netMHCIIpan_dir,
peptide_length,
export_dir,
input_file = "",
job_id)
netMHCIIpan_dir
peptide_length
peptide_length<-15
ls(all=T)
character(0)
rm(list=ls(all=TRUE))
for(rc in list.files("/Users/takaorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takaorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
Result_HLA1_Seq <- MainSeqFragmentClass1(input_sequence = "atggcagaagatgatccatatttgggaaggcctgaaaaaatgtttcatttggatccttctttgactcatacaatatttaatc",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
hmdir = getwd(),
job_id = "NO_job_id",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan",
reference_nm_id = c("NM_003998", "NM_001165412"))
print(head(Result_HLA1_Seq))
print(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
Result_HLA2_Seq <- MainSeqFragmentClass2(input_sequence = "atggcagaagatgatccatatttgggaaggcctgaacaaatgtttcatttgatccttctttgactcatacaatatttaatc",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
hmdir = getwd(),
job_id = "NO_job_id",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
netMHCIIpan_dir = "lib/netMHCIIpan-3.2/netMHCIIpan",
reference_gene_symbol = c("NFKB1", "BCL3")
)
print(head(Result_HLA2_Seq))
print(Export_Summary_Fragments(Result_HLA2_Seq, Mut_IC50_th = 500))
print(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
print(Export_Summary_Fragments(Result_HLA2_Seq, Mut_IC50_th = 500))
print(head(Result_HLA2_Seq))
View(Result_HLA2_Seq)
print(Export_Summary_Fragments(Result_HLA2_Seq, Mut_IC50_th = 500))
print(head(Result_HLA1_Seq))
print(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
#install.packages('devtools');
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
setwd("lib")
#install.packages('devtools');
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
setwd("~/Github/Neoantimon/lib")
#for(rc in list.files("/Users/takanorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takanorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
getwd()
#install.packages('devtools');
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
#setwd("~/Github/Neoantimon/lib")
#for(rc in list.files("/Users/takanorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takanorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
getwd()
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "./../lib/netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
print(head(Result_HLA1_SNV[[1]]))
print(Export_Summary_SNV(Input = Result_HLA1_SNV[[1]], Mut_IC50_th = 500, Wt_IC50_th = 500))
Result_HLA2_SNV <- MainSNVClass2(input_annovar_format_file = "data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "./../lib/netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample.snps.vcf",
multiple_variants = TRUE)
print(head(Result_HLA2_SNV))
#install.packages('devtools');
library(devtools);
#install_github('hase62/Neoantimon');
library(Neoantimon);
setwd("~/Github/Neoantimon/vignettes/")
#for(rc in list.files("/Users/takanorihasegawa/Git/Neoantimon/R")) source(paste("/Users/takanorihasegawa/Git/Neoantimon/R", rc, sep = "/"))
#install.packages('devtools');
library(devtools);
install_github('hase62/Neoantimon');
library(Neoantimon);
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = "data/sample_vcf.annovar.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample_vcf.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
Result_HLA1_SNV_1 <- CalculatePriorityScores(result = Result_HLA1_SNV[[1]], useRNAvaf = FALSE)
Result_HLA1_SNV_2 <- CalculatePriorityScores(result = Result_HLA1_SNV[[2]], useRNAvaf = FALSE)
print(head(Result_HLA1_SNV_1))
print(Export_Summary_SNV(Input = Result_HLA1_SNV_1, Mut_IC50_th = 500, Wt_IC50_th = 500))
Result_HLA1_SNV_vep <- MainSNVClass1(input_vep_format_file = "data/sample_vcf.vep.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
multiple_variants = FALSE)
Result_HLA1_vep_SNV <- CalculatePriorityScores(result = Result_HLA1_SNV_vep, useRNAvaf = FALSE)
print(head(Result_HLA1_vep_SNV))
print(Export_Summary_SNV(Input = Result_HLA1_vep_SNV, Mut_IC50_th = 500, Wt_IC50_th = 500))
Result_HLA2_SNV <- MainSNVClass2(input_annovar_format_file = "data/sample_vcf.annovar.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample_vcf.snps.vcf",
multiple_variants = TRUE)
Result_HLA2_SNV <- CalculatePriorityScores(result = Result_HLA2_SNV, useRNAvaf = FALSE)
print(head(Result_HLA2_SNV))
print(Export_Summary_SNV(Input = Result_HLA2_SNV, Mut_IC50_th = 500, Wt_IC50_th = 500))
Result_HLA1_INDEL <- MainINDELClass1(input_annovar_format_file = "data/sample_vcf.annovar.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample_vcf.snps.vcf",
multiple_variants = TRUE,
MHCflurry = "~/opt/anaconda3/bin/mhctools")
Result_HLA1_INDEL_1 <- CalculatePriorityScores(result = Result_HLA1_INDEL[[1]], useRNAvaf = FALSE)
Result_HLA1_INDEL_2 <- CalculatePriorityScores(result = Result_HLA1_INDEL[[2]], useRNAvaf = FALSE)
print(head(Result_HLA1_INDEL_1))
print(Export_Summary_IndelSV(Input = Result_HLA1_INDEL_1, Mut_IC50_th = 500))
print(Export_Summary_IndelSV_perFragments(Input = Result_HLA1_INDEL_1, Mut_IC50_th = 500))
Result_HLA2_INDEL <- MainINDELClass2(input_annovar_format_file = "data/sample_vcf.annovar.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
depth_tumor_column = 12,
depth_normal_column = 14,
SNPs = "data/sample_vcf.snps.vcf",
multiple_variants = TRUE)
Result_HLA2_INDEL <- CalculatePriorityScores(result = Result_HLA2_INDEL, useRNAvaf = FALSE)
print(head(Result_HLA2_INDEL))
print(Export_Summary_IndelSV(Input = Result_HLA2_INDEL, Mut_IC50_th = 500))
print(Export_Summary_IndelSV_perFragments(Input = Result_HLA2_INDEL, Mut_IC50_th = 500))
Result_HLA1_SV <- MainSVFUSIONClass1(input_file = "data/sample_sv_bnd.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
refdna_file = "GRCh37.fa",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8)
Result_HLA1_SV <- CalculatePriorityScores(result = Result_HLA1_SV, useRNAvaf = FALSE)
print(head(Result_HLA1_SV))
print(Export_Summary_IndelSV(Result_HLA1_SV, Mut_IC50_th = 500))
print(Export_Summary_IndelSV_perFragments(Result_HLA1_SV, Mut_IC50_th = 500))
Result_HLA2_SV <- MainSVFUSIONClass2(input_file = "data/sample_sv_bnd.txt",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
rnaexp_file = "data/sample_rna_exp.txt",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
refdna_file = "GRCh37.fa",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8)
Result_HLA2_SV <- CalculatePriorityScores(result = Result_HLA2_SV, useRNAvaf = FALSE)
print(head(Result_HLA2_SV))
print(Export_Summary_IndelSV(Result_HLA2_SV, Mut_IC50_th = 500))
print(Export_Summary_IndelSV_perFragments(Result_HLA2_SV, Mut_IC50_th = 500))
Result_HLA1_Seq <- MainSeqFragmentClass1(input_sequence = "atggcagaagatgatccatatttgggaaggcctgaaaaaatgtttcatttggatccttctttgactcatacaatatttaatc",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c1.txt",
hmdir = getwd(),
job_id = "NO_job_id",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
netMHCpan_dir = "netMHCpan-4.0/netMHCpan",
reference_nm_id = c("NM_003998", "NM_001165412"))
Result_HLA1_Seq <- CalculatePriorityScores(result = Result_HLA1_Seq, useRNAvaf = FALSE)
print(head(Result_HLA1_Seq))
print(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))
Result_HLA2_Seq <- MainSeqFragmentClass2(input_sequence = "atggcagaagatgatccatatttgggaaggcctgaacaaatgtttcatttgatccttctttgactcatacaatatttaatc",
file_name_in_hla_table = "sample",
hla_file = "data/sample_hla_table_c2.txt",
hmdir = getwd(),
job_id = "NO_job_id",
refflat_file  = "refFlat.grch37.txt",
refmrna_file = "refMrna.grch37.fa",
netMHCIIpan_dir = "netMHCIIpan-3.2/netMHCIIpan",
reference_gene_symbol = c("NFKB1", "BCL3"))
Result_HLA2_Seq <- CalculatePriorityScores(result = Result_HLA2_Seq, useRNAvaf = FALSE)
print(head(Result_HLA2_Seq))
print(Export_Summary_Fragments(Result_HLA2_Seq, Mut_IC50_th = 500))
#install.packages('devtools');
library(devtools);
install_github('hase62/Neoantimon');
library(Neoantimon);
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
build_vignettes()
