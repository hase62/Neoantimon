MainMergeINDELSVClass1(input_dir = "result.sample.NO_job_id_INDEL",
file_prefix = "NO_job_id_INDEL",
annotation_file = "lib/data/sample_vcf.txt.NO_JOB_ID_INDEL.peptide.txt")
library(devtools);
install_github('hase62/Neoantimon');
library(Neoantimon);
MainMergeINDELSVClass1(input_dir = "result.sample.NO_job_id_INDEL",
file_prefix = "NO_job_id_INDEL",
annotation_file = "lib/data/sample_vcf.txt.NO_JOB_ID_INDEL.peptide.txt")
getwd()
setwd("~/Git/Neoantimon/R")
MainMergeINDELSVClass1(input_dir = "result.sample.NO_job_id_INDEL",
file_prefix = "NO_job_id_INDEL",
annotation_file = "lib/data/sample_vcf.txt.NO_job_id_INDEL.peptide.txt")
MainMergeINDELSVClass2(input_dir = "result.sample.NO_job_id_INDEL",
file_prefix = "NO_job_id_INDEL",
annotation_file = "lib/data/sample_vcf.txt.NO_job_id_INDEL.peptide.txt")
head(sample_vcf, row.names = FALSE)
data("sample_vcf")
head(sample_vcf, row.names = FALSE)
input_sequence = NA
input_nm_id = NA
length(input_sequence)
if(is.na(group_ids[1])) group_ids <- seq(1,
ifelse(is.na(input_sequence[1]), 0, length(input_sequence)) +
ifelse(is.na(input_nm_id[1]), 0, length(input_nm_id)))
group_ids = NA
if(is.na(group_ids[1])) group_ids <- seq(1,
ifelse(is.na(input_sequence[1]), 0, length(input_sequence)) +
ifelse(is.na(input_nm_id[1]), 0, length(input_nm_id)))
group_ids
group_ids
c(ifelse(is.na(input_sequence[1]), "", input_sequence)
)
c(input_sequence, input_nm_id)
tmp <- c(input_sequence, input_nm_id)
tmp[!is.na(tmp)]
input_sequence = "atggcagaagatgatccatatttgggaaggcctgaaaaaatgtttcatttggatccttctttgactcatacaatatttaatc"
file_name_in_hla_table = "sample"
hla_file = "lib/data/sample_hla_table_c1.txt"
hmdir = getwd()
job_id = "NO_job_id"
refflat_file  = "lib/refFlat.txt"
refmrna_file = "lib/refMrna.fa"
netMHCpan_dir = "lib/netMHCpan-4.0/netMHCpan"
nm_id = c("NM_003998", "NM_001165412")
reading_frame = 1
input_nm_id
input_nm_id = NA
group_ids = NA
peptide_length = c(8, 9, 10, 11, 12, 13)
if(CheckRequiredFiles2(input_sequence = input_sequence,
input_nm_id = input_nm_id,
hla_file = hla_file,
refflat_file = refflat_file,
refmrna_file = refmrna_file,
nm_id,
gene_symbol,
reading_frame)) return(NULL)
library(Neoantimon)
if(CheckRequiredFiles2(input_sequence = input_sequence,
input_nm_id = input_nm_id,
hla_file = hla_file,
refflat_file = refflat_file,
refmrna_file = refmrna_file,
nm_id,
gene_symbol,
reading_frame)) return(NULL)
if(CheckRequiredFiles2(input_sequence = input_sequence,
input_nm_id = input_nm_id,
hla_file = hla_file,
refflat_file = refflat_file,
refmrna_file = refmrna_file,
nm_id,
gene_symbol,
reading_frame)) return(NULL)
SettingNetMHCpan
x <- c("dadae", "DEWDEWD")
grep("dada", x)
grep("Dada", x)
grep("Dada", x, ignore.case = TRUE)
output_f <- "/yshare2/home/mimorin/NeoAntimon4.0/result./home/mimorin/Genomon2_output/Hirata_EsoCRT/filter.mutation//EsoCRT_07_P1_tumor/EsoCRT_07A_T1_tumor.filter.gather_genomon_mutations.result.txt.NO_job_id.SNV/NO_job_id_SNV.HLACLASS1.6.normpeptide.txt"
nchar(output_f) > 238
output_f
nchar(output_f)
sub
output_f
strsplit(output_f, "/")
rev(strsplit(output_f, "/"))
rev(strsplit(output_f, "/"))
rev(strsplit(output_f, "/"))[1]
sub(rev(strsplit(output_f, "/"))[1]
)
job_id <- "NO_job_id"
sub(job_id, "", rev(strsplit(output_f, "/"))[1])
sub(job_id, "", rev(strsplit(output_f, "/"))[1])
rev(strsplit(output_f, "/"))[1]
rev(strsplit(output_f, "/")[[1]])[1]
sub(job_id, "", rev(strsplit(output_f, "/")[[1]])[1])
sub(job_id, "", rev(strsplit(output_f, "/")[[1]])[1])
runif(!)
runif(1)
runif(1) * 10000
runif(1) * 1000000
paste(".temp.Neoantimon.", runif(1) * 1000000, "txt", sep = "")
runif(1) * 1000000
output_f_new <- paste(".temp.Neoantimon.", runif(1) * 1000000, "txt", sep = "")
output_f_new
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1) * 1000000
16/61 * 12/ 61
3/64
4*48 / 61/61
4^3
3 * 4^3
3 * 4^3 / 61^2
theoretical_pro <- 3 * 4^3 / 61^2
theoretical_pro
(1 - theoretical_pro)^50
(1 - theoretical_pro)
3/61
(1 - theoretical_pro)^100
#Execute NetMHCpan
ExeNetMHCpanClass1<-function(output_peptide_prefix,
peptides,
hla_types,
netMHCpan_dir,
peptide_length,
export_dir,
input_file,
job_id){
for(pep in peptides){
COUNT<-1
output_f <- paste(output_peptide_prefix, pep, "fasta",sep=".")
USETEMP <- FALSE
if(nchar(output_f) > 230) {
output_f_new <- paste("temp.Neoantimon.", runif(1) * 1000000, "txt", sep = "")
file.copy(from = output_f, to = output_f_new)
output_f <- output_f_new
USETEMP <- TRUE
}
for(hla_type in hla_types){
paste("Calculating", pep, hla_type)
system(paste(netMHCpan_dir,
" -BA ",
" -l ", paste(peptide_length, collapse = ","),
" -f ", output_f,
" -a HLA-", gsub("\\*","",hla_type),
" > ", export_dir, "/", rev(strsplit(input_file, "/")[[1]])[1], ".", job_id, ".HLACLASS1.", COUNT, ".", pep, ".txt", sep=""))
COUNT <- COUNT + 1
}
if(USETEMP) file.remove(output_f)
}
}
getHLAtypes<-function(hla_file, file_name_in_hla_table){
hla <- t(sapply(scan(hla_file, "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
hit <- match(file_name_in_hla_table, hla[, 1])
if(is.na(hit)) {
print(file_name_in_hla_table, "is not included in", hla_file)
return (NULL)
}
return(hla[hit, -1])
}
seq(1:2)
seq(1:length(input_nm_id))
tmp <- matrix(nrow = 5, ncol = 5, 1)
tmnp
tmp
cbind(tmp, 0.05)
